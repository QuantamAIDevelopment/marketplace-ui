{
  "name": "Inventory_management",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "inventory-check",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "466f3ad6-7311-4e2e-bfad-6ddf87d3c177",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -480,
        700
      ],
      "webhookId": "37a9c009-699d-464d-a59f-d6e14993215f"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.currentstock }}",
              "value2": "={{ $json.threshold }}"
            }
          ]
        }
      },
      "id": "d27c90aa-4ea2-4c73-9fc6-4e89b471047b",
      "name": "Low Stock Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        940,
        600
      ]
    },
    {
      "parameters": {
        "content": "## return order update\n\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)                ",
        "height": 320,
        "width": 720,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        -20
      ],
      "id": "df399528-be33-46cb-bfd3-d45e5a99c340",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM stockdata\nWHERE currentstock <= threshold;\n",
        "additionalFields": {}
      },
      "id": "025a3371-cfb7-4781-9baa-88dd5636d4cd",
      "name": "Check Low Stock",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1080,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Auto restock trigger every day once\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 260,
        "width": 520,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        880,
        60
      ],
      "id": "310ee9dc-6300-4390-bd79-2d7a8ab2cc88",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM stockdata\nWHERE currentstock > reorderquantity;\n",
        "options": {}
      },
      "id": "07687de9-c5ab-4109-867c-0ae0ec32c08a",
      "name": "Check Overstock",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -540,
        120
      ],
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## auto check for the overstock in a week and send alert to the manager\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)",
        "height": 280,
        "width": 700
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -800,
        20
      ],
      "id": "92e627ae-7edd-44d4-af09-29bf9e388ce8",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2840,
        240
      ],
      "id": "744f85c3-ed52-4ddc-93f8-11b992fd5b16",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM",
          "mode": "list",
          "cachedResultName": "n8n-work-book",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 999021925,
          "mode": "list",
          "cachedResultName": "inventory-order-stock",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit#gid=999021925"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2340,
        360
      ],
      "id": "5745865d-914f-49b2-87ea-2c9df78dd606",
      "name": "stock order",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zEaLif2NVdOGF6k8",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.sqlScript }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        460,
        100
      ],
      "id": "b198836e-0ad3-40f4-a6db-3476c639bea7",
      "name": "update inventory",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "listId": "6847c1f14c2cb4501661f5d9",
        "name": "={{ $json.productname }}",
        "description": "create a flag",
        "additionalFields": {
          "idLabels": "684814107bf2957e91b125ac"
        }
      },
      "type": "n8n-nodes-base.trello",
      "typeVersion": 1,
      "position": [
        1280,
        680
      ],
      "id": "d4f11c9d-2a37-4fb8-a7c2-c09396055aec",
      "name": "over stock flag",
      "credentials": {
        "trelloApi": {
          "id": "nlYJfMNOXmNxSLF8",
          "name": "Trello account"
        }
      }
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "minutes"
      },
      "id": "2a5ca0eb-3419-4f10-955c-90365e05f21b",
      "name": "Wait 10 Min",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1500,
        840
      ],
      "webhookId": "36fdb209-2651-4283-8a46-23f4b89ea832"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.message }}",
              "value2": 3
            }
          ]
        }
      },
      "id": "8c666d5f-45d2-4b68-88f1-7701d24fbad9",
      "name": "IF Retry < 3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1700,
        840
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{ json: { retryCount: $json.retryCount + 1 } }];"
      },
      "id": "d0a97e41-1ce6-4fc7-b1cd-b2ad9f17e353",
      "name": "Increment Retry",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        880
      ]
    },
    {
      "parameters": {},
      "id": "3720ecd7-e7a9-4b4a-ab73-431f64df3f4a",
      "name": "Exit",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1900,
        1120
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "stockdata",
          "mode": "list",
          "cachedResultName": "stockdata"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        580
      ],
      "id": "5b371b52-ae0e-4dc1-a8e0-5b3437748202",
      "name": "fetch inventory",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 11
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -760,
        120
      ],
      "id": "db3cf6c2-24a0-4e1a-8e5a-db147f8e554a",
      "name": "Trigger once in a week"
    },
    {
      "parameters": {
        "sendTo": "akhilqaid@gmail.com",
        "subject": "over stock alert",
        "message": "=hello inventory manager,\nThe product {{ $json.productname }} with the sku {{ $json.sku }} is more then the record quantity, current stock is {{ $json.currentstock }} but the record quantity is {{ $json.reorderquantity }} so take the nessery action to manage it.",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -320,
        120
      ],
      "id": "c9c457b2-bc1c-4ee3-89b4-236803dad2c4",
      "name": "send mail to manager",
      "webhookId": "c698976f-1b91-49d1-8d60-69c772b49322",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 6
            }
          ]
        }
      },
      "id": "c321d390-0698-42c1-ba30-66e97ae9c534",
      "name": "Trigger every 6 hours",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        400
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93645942-e11b-4352-8804-5e9e70fe2634",
              "name": "SKU",
              "value": "={{ $json.query.SKU }}",
              "type": "string"
            },
            {
              "id": "571007f9-a10a-457c-a282-30c0c41e3575",
              "name": "STATUS",
              "value": "={{ $json.query.STATUS }}",
              "type": "string"
            },
            {
              "id": "8a62329d-f896-4f8a-b386-5e555b40d82b",
              "name": "Returnstock",
              "value": "={{ $json.query.Returnstock }}",
              "type": "string"
            },
            {
              "id": "71a5ea66-dad1-4776-95d4-4f931ec235d2",
              "name": "Product Name",
              "value": "={{ $json.query.productName }}",
              "type": "string"
            },
            {
              "id": "b0770002-d75c-4d1c-b128-a9a0c08d981d",
              "name": "CurrentStock",
              "value": "={{ $json.query.CurrentStock }}",
              "type": "string"
            },
            {
              "id": "e2b5275b-68d8-42e2-9bac-53867953a7d3",
              "name": "Threshold",
              "value": "={{ $json.query.Threshold }}",
              "type": "string"
            },
            {
              "id": "470c1249-48b9-4f50-b8ef-6167a3c4840d",
              "name": "Reorder Quantity",
              "value": "={{ $json.query.reorderQuantity }}",
              "type": "string"
            },
            {
              "id": "b5d98687-dc6f-4105-b911-8e547379ece0",
              "name": "Warehouse",
              "value": "={{ $json.query.Warehouse }}",
              "type": "string"
            },
            {
              "id": "c7bd4b89-d9fa-4d82-88c7-133d13126831",
              "name": "Supplier Name",
              "value": "={{ $json.query.supplierName }}",
              "type": "string"
            },
            {
              "id": "8730d22f-7324-426b-af4c-78a76f95007e",
              "name": "Supplier Contact",
              "value": "={{ $json.query.supplierContact }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        100
      ],
      "id": "872f2f3b-5942-48ed-b61a-31bb371af411",
      "name": "extract webhook body"
    },
    {
      "parameters": {
        "jsCode": "function generateSQLScript(inputData) {\n\n    let sqlScripts = [];\n\n    inputData.forEach(item => {\n\n        const {\n\n            SKU,\n\n            STATUS,\n\n            Returnstock,\n\n            \"Product Name\": productName,\n\n            CurrentStock,\n\n            Threshold,\n\n            \"Reorder Quantity\": reorderQuantity,\n\n            Warehouse,\n\n            \"Supplier Name\": supplierName,\n\n            \"Supplier Contact\": supplierContact\n\n        } = item;\n \n        // Map input fields to database column names\n\n        const mappedProductName = productName || null;\n\n        const mappedCurrentStock = CurrentStock || null;\n\n        const mappedReturnstock = Returnstock || null;\n\n        const mappedThreshold = Threshold || null;\n\n        const mappedReorderQuantity = reorderQuantity || null;\n\n        const mappedWarehouse = Warehouse || null;\n\n        const mappedSupplierName = supplierName || null;\n\n        const mappedSupplierContact = supplierContact || null;\n \n        // Generate SQL based on STATUS\n\n        let sql;\n\n        switch (STATUS.toUpperCase()) {\n\n            case 'INSERT':\n\n                sql = `\n\n                    INSERT INTO stockdata (\n\n                        Product_Name, SKU, CurrentStock, Threshold, Reorder_Quantity, Warehouse, Supplier_Name, Supplier_Contact\n\n                    ) VALUES (\n\n                        ${mappedProductName ? `'${mappedProductName.replace(/'/g, \"''\")}'` : 'NULL'},\n\n                        '${SKU.replace(/'/g, \"''\")}',\n\n                        ${mappedCurrentStock !== null ? mappedCurrentStock : 'NULL'},\n\n                        ${mappedThreshold !== null ? mappedThreshold : 'NULL'},\n\n                        ${mappedReorderQuantity !== null ? mappedReorderQuantity : 'NULL'},\n\n                        ${mappedWarehouse ? `'${mappedWarehouse.replace(/'/g, \"''\")}'` : 'NULL'},\n\n                        ${mappedSupplierName ? `'${mappedSupplierName.replace(/'/g, \"''\")}'` : 'NULL'},\n\n                        ${mappedSupplierContact ? `'${mappedSupplierContact.replace(/'/g, \"''\")}'` : 'NULL'}\n\n                    );\n\n                `;\n\n                break;\n \n            case 'UPDATE':\n\n                sql = `\n\n                    UPDATE stockdata\n\n                    SET\n\n                        ${mappedProductName ? `Product_Name = '${mappedProductName.replace(/'/g, \"''\")}',` : ''}\n\n                        ${(mappedCurrentStock !== null || mappedReturnstock !== null) ? `CurrentStock = CurrentStock + ${(mappedReturnstock || 0)}, ` : ''}\n\n                        ${mappedThreshold !== null ? `Threshold = ${mappedThreshold},` : ''}\n\n                        ${mappedReorderQuantity !== null ? `Reorder_Quantity = ${mappedReorderQuantity},` : ''}\n\n                        ${mappedWarehouse ? `Warehouse = '${mappedWarehouse.replace(/'/g, \"''\")}',` : ''}\n\n                        ${mappedSupplierName ? `Supplier_Name = '${mappedSupplierName.replace(/'/g, \"''\")}',` : ''}\n\n                        ${mappedSupplierContact ? `Supplier_Contact = '${mappedSupplierContact.replace(/'/g, \"''\")}',` : ''}\n\n                       \n\n                    WHERE SKU = '${SKU.replace(/'/g, \"''\")}';\n\n                `;\n\n                // Remove trailing comma before WHERE\n\n                sql = sql.replace(/,\\s*WHERE/, ' WHERE');\n\n                break;\n \n            case 'DELETE':\n\n                sql = `\n\n                    DELETE FROM stockdata\n\n                    WHERE SKU = '${SKU.replace(/'/g, \"''\")}';\n\n                `;\n\n                break;\n \n            default:\n\n                sql = `-- Invalid STATUS '${STATUS}' for SKU '${SKU}'`;\n\n        }\n \n        sqlScripts.push({ json: { sqlScript: sql.trim() } });\n\n    });\n \n    return sqlScripts;\n\n}\n \n// Get input data from n8n\n\nconst inputData = items.map(item => item.json);\n \n// Generate SQL scripts and return in n8n format\n\nreturn generateSQLScript(inputData);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        100
      ],
      "id": "f4d53263-c78c-471c-8464-4494cc97b9f1",
      "name": "generate the SQL query"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        920,
        160
      ],
      "id": "cf68191a-f758-4b8d-9511-a6fd882a5844",
      "name": "Trigger every 2 hours"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst timestamp = $(\"Trigger every 2 hours\").all()[0]?.json?.timestamp;\n\nconst updatedItems = items.map((item) => {\n  const restockUnits = item?.json?.reorder_quantity - item?.json?.currentstock;\n  item.json.restockUnits = restockUnits;\n  item.json.timestamp = timestamp;\n  return item;\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        160
      ],
      "id": "76caeaf5-07df-4e24-893c-fc044ae68212",
      "name": "calculate Restock units"
    },
    {
      "parameters": {
        "jsCode": "const productData = $(\"Low Stock Check\")\n  .all()\n  .map((item) => item.json);\nreturn productData;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1980,
        500
      ],
      "id": "85e1472d-5a56-48f7-9bd7-bf44f027d2ed",
      "name": "extract the data from slack"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  item.json.restockUnits = item.json.reorder_quantity - item.json.currentstock;\n  item.json.timestamp = new Date();\n  return item;\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        500
      ],
      "id": "7dc53607-3164-4d0a-aedb-cf116a9f55ba",
      "name": "calculate the Restock units"
    },
    {
      "parameters": {
        "sendTo": "=akhilqaid@gmail.com",
        "subject": "restock units",
        "message": "=Dear {{ $json.suppliername }} ,\n\nI hope this message finds you well.\n\nWe are reaching out to request a restock of the following product due to low inventory levels at our warehouse:\n\nProduct Name:{{ $json.productname }}\n\nSKU:{{ $json.sku }}\n\nrestockunits:{{ $json.restockUnits }}\nWarehouse Location:{{ $json.warehouse }}\n\nKindly confirm the availability and expected delivery date for the requested units at your earliest convenience. Please include any relevant shipping or invoice details required to process this request smoothly.\n\nLooking forward to your response.\n\nBest regards,",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2400,
        500
      ],
      "id": "84e127ce-1f8f-42f7-b792-f68e0228a8e3",
      "name": "send mails to the suppliers",
      "webhookId": "0e30b88a-eb3f-4be6-9513-6de96a06e1b8",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const products = $input.all().map((item) => item.json);\nconst effectedProducts = products.filter(\n  (product) => product.currentstock <= product.threshold,\n);\n\nreturn { effectedProducts };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        180
      ],
      "id": "faa6f517-8b09-40cf-827c-e29196e571af",
      "name": "check the effected product"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map((item) => item.json);\nconst effectedProducts = items[0].effectedProducts;\n\nconst lowStockProducts = effectedProducts.map((product) => {\n  return {\n    Product: product.productname,\n    SKU: product.sku,\n    \"Current Stock\": product.currentstock,\n    Threshold: product.threshold,\n    Action:\n      product.currentstock < product.threshold\n        ? \"Recommend restocking \" + product.reorderquantity + \" units\"\n        : \"Auto-PO created & sent to supplier\",\n  };\n});\n\nreturn { lowStockProducts };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        180
      ],
      "id": "89ebfbcc-3754-4798-82f7-724a08755411",
      "name": "extract the data of effected products"
    },
    {
      "parameters": {
        "jsCode": "const triggerType = 'manual'; // Change to 'scheduled' or 'event' as needed\n\nconst error = null; // Set to an error message if needed\n\nfor (const item of $input.all()) {\n  item.json.timestamp = new Date().toISOString();\n  item.json.triggerType = triggerType;\n $input.first().json.lowStockProducts\n  item.json.error = error;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        180
      ],
      "id": "ac309ed6-7701-45c7-950d-f01174611d24",
      "name": "Add timestamp &error"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1f7419fd-159c-4811-b4b6-f16ad87d86d2",
              "name": "productseffected",
              "value": "=ProductName:{{ $json.Product }},SKU:{{ $json.SKU }},CurrentStock:{{ $json['Current Stock'] }},Threshold:{{ $json.Threshold }},Action:{{ $json.Action }}.",
              "type": "string"
            },
            {
              "id": "d8b0bb14-3ac4-43bb-aa77-63ff91d376a7",
              "name": "timestamp",
              "value": "={{ $json.timestamp }}",
              "type": "string"
            },
            {
              "id": "f81ffd59-2a5c-441f-a2e9-69c3ecdf30bd",
              "name": "triggerType",
              "value": "={{ $json.triggerType }}",
              "type": "string"
            },
            {
              "id": "559ba6d6-0d0b-4678-853f-a97d06062805",
              "name": "error",
              "value": "={{ $json.error }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2480,
        180
      ],
      "id": "26a6d4f4-12be-4cea-9879-8609b32de54b",
      "name": "extract the log details"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM",
          "mode": "list",
          "cachedResultName": "n8n-work-book",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1897104635,
          "mode": "list",
          "cachedResultName": "inventory-management",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit#gid=1897104635"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "productseffected",
              "displayName": "productseffected",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "triggerType",
              "displayName": "triggerType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "error",
              "displayName": "error",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2640,
        180
      ],
      "id": "02d93d42-ba63-4199-9dab-0444f025b110",
      "name": "log",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zEaLif2NVdOGF6k8",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "akhilqaid@gmail.com",
        "subject": "error",
        "message": "=hello \nmanager theirn is an error in the inventory {{ $json.message }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1760,
        680
      ],
      "id": "8a752c44-4fbd-4166-aedb-e1d38a5a9165",
      "name": "error message to manager",
      "webhookId": "56716585-91d0-446e-8640-5cd4255dc20d",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  item.json.isFromFetchInventory = item.json.productname ? true : false;\n  return item;\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        780
      ],
      "id": "a02aa3fb-0ad6-4a97-85b9-67f5bb02e92a",
      "name": "fetch inventory products and set their status as true or false"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15707447-4eae-460f-8b93-eccf7554e067",
              "leftValue": "={{ $json.isFromFetchInventory }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        900,
        780
      ],
      "id": "afd60c2d-d24d-4ef4-a621-fa0e97119094",
      "name": "check the product status"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst errors = items.map((item) => {\n  const timestamp = new Date().toISOString();\n  const error = item?.json?.isFromFetchInventory\n    ? \"Error from Fetch Inventory\"\n    : \"Unknown error\";\n  return { json: { error, timestamp } };\n});\nreturn errors;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        840
      ],
      "id": "f9f3b018-9054-4cb7-ab61-78f5081ba6a2",
      "name": "fetch the error"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst errorMessage = items.map((item) => {\n  return {\n    message: `Error: ${item?.json?.error}, Timestamp: ${item?.json?.timestamp}`,\n  };\n});\nreturn errorMessage;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        840
      ],
      "id": "b4bf2206-2557-48cb-a417-5a703b29db35",
      "name": "generate the error message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a275e2e0-4d17-432b-9922-c2a1c7d8c4e0",
              "leftValue": "={{ $json.query.STATUS }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -180,
        620
      ],
      "id": "a9efb5f0-eac0-4ff6-82f4-ab6c74339773",
      "name": "if webhook query is not empty"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map((item) => item.json);\nconst result = items\n  .map((item) => {\n    const lowStockProducts = item.lowStockProducts.map((product) => ({\n      ...product,\n      triggerType: item.triggerType,\n      timestamp: item.timestamp,\n      error: item.error,\n    }));\n    return lowStockProducts;\n  })\n  .flat();\n\nconst output = [];\nfor (const product of result) {\n  output.push({ json: product });\n}\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        180
      ],
      "id": "0c7a8e2f-fc4a-4dc2-8a0a-b175d18095c8",
      "name": "converting the effected products as list"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM",
          "mode": "list",
          "cachedResultName": "n8n-work-book",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1842057073,
          "mode": "list",
          "cachedResultName": "inventory-stock-alerts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit#gid=1842057073"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1360,
        460
      ],
      "id": "20a89d78-d5ef-4793-b9d1-985ba4b758a9",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zEaLif2NVdOGF6k8",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "if webhook query is not empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Low Stock Check": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "over stock flag",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Low Stock": {
      "main": [
        [
          {
            "node": "calculate Restock units",
            "type": "main",
            "index": 0
          },
          {
            "node": "check the effected product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Overstock": {
      "main": [
        [
          {
            "node": "send mail to manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update inventory": {
      "main": [
        [
          {
            "node": "fetch inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 10 Min": {
      "main": [
        [
          {
            "node": "IF Retry < 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Retry < 3": {
      "main": [
        [
          {
            "node": "Increment Retry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Exit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Retry": {
      "main": [
        [
          {
            "node": "fetch inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch inventory": {
      "main": [
        [
          {
            "node": "Low Stock Check",
            "type": "main",
            "index": 0
          },
          {
            "node": "check the effected product",
            "type": "main",
            "index": 0
          },
          {
            "node": "fetch inventory products and set their status as true or false",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger once in a week": {
      "main": [
        [
          {
            "node": "Check Overstock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger every 6 hours": {
      "main": [
        [
          {
            "node": "fetch inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract webhook body": {
      "main": [
        [
          {
            "node": "generate the SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate the SQL query": {
      "main": [
        [
          {
            "node": "update inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger every 2 hours": {
      "main": [
        [
          {
            "node": "Check Low Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate Restock units": {
      "main": [
        [
          {
            "node": "send mails to the suppliers",
            "type": "main",
            "index": 0
          },
          {
            "node": "stock order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract the data from slack": {
      "main": [
        [
          {
            "node": "calculate the Restock units",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate the Restock units": {
      "main": [
        [
          {
            "node": "send mails to the suppliers",
            "type": "main",
            "index": 0
          },
          {
            "node": "stock order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check the effected product": {
      "main": [
        [
          {
            "node": "extract the data of effected products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract the data of effected products": {
      "main": [
        [
          {
            "node": "Add timestamp &error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add timestamp &error": {
      "main": [
        [
          {
            "node": "converting the effected products as list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract the log details": {
      "main": [
        [
          {
            "node": "log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch inventory products and set their status as true or false": {
      "main": [
        [
          {
            "node": "check the product status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check the product status": {
      "main": [
        [],
        [
          {
            "node": "fetch the error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch the error": {
      "main": [
        [
          {
            "node": "generate the error message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Add timestamp &error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate the error message": {
      "main": [
        [
          {
            "node": "Wait 10 Min",
            "type": "main",
            "index": 0
          },
          {
            "node": "error message to manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if webhook query is not empty": {
      "main": [
        [
          {
            "node": "extract webhook body",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "fetch inventory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "converting the effected products as list": {
      "main": [
        [
          {
            "node": "extract the log details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "extract the data from slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d926c938-0d33-4c45-890b-31382fb01245",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b49f74740e4a155f21338af76c2aa80263c734ce9c55ab82f1aa145d7b4ee228"
  },
  "id": "y60mIChvjFQ5Shjy",
  "tags": []
}