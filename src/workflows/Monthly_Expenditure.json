{
  "name": "Monthly_Expenditure",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -360,
        -160
      ],
      "id": "32b03128-030e-42fd-95f1-04bf654ca59b",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = items.map(item => item.json);\nconst categoryBreakdown = {};\nlet totalAmount = 0;\n\nrows.forEach(row => {\n  const cat = row.category || \"Uncategorized\";\n  const amt = parseFloat(row.amount) || 0;\n  const label = row.paid_to || row.description || \"Unknown\";\n\n  if (!categoryBreakdown[cat]) {\n    categoryBreakdown[cat] = {\n      total: 0,\n      items: []\n    };\n  }\n\n  categoryBreakdown[cat].total += amt;\n  categoryBreakdown[cat].items.push({\n    label,\n    amount: amt\n  });\n\n  totalAmount += amt;\n});\n\nreturn [{\n  json: {\n    totalAmount,\n    categorized: categoryBreakdown\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        0
      ],
      "id": "78e5aeb5-3880-47af-9a9b-cc26c0ae07a0",
      "name": "Code3"
    },
    {
      "parameters": {
        "sendTo": "gugulothusony07@gmail.com",
        "subject": "Monthly Expenditure",
        "emailType": "text",
        "message": "=Hi Asmitha,\n\n\nTotal Spent: {{ $json.totalAmount }}\n\nItems:\n{{ $json.categorized.Uncategorized.items.map(item => `    item-name: ${item.label}, item-amount: ${item.amount}`).join('\\n') }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1460,
        0
      ],
      "id": "7fd7177f-873d-49eb-a175-c8c29c660079",
      "name": "Gmail",
      "webhookId": "b7b01c52-aeba-4cf1-b53d-1f8e1635678f",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-bill",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -340,
        200
      ],
      "id": "db625034-2783-42bd-817a-53464ef0fbe9",
      "name": "Webhook",
      "webhookId": "ee0c9efc-9d9b-4af0-af24-f7c147e52ee7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=give amount without any \",\"\n{\n  \"Date of bill \": \"YYYY-MM-DD\",\n  \"amount\": \"XXXXX\",\n  \"paid to\" :\"xxx\"\n  \"mtrno\"  :\"xxx\"\n}\n analyze bill paid to\n{{ $json.webhookUrl }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -100,
        200
      ],
      "id": "339a3930-e26b-403b-87e0-7984c50f9c41",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -80,
        440
      ],
      "id": "87372bb1-cfb7-4b43-907b-5997372e9195",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "JjMmhLRCLv1lEaa6",
          "name": "OpenRouter New"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "amount": "={{ $json.output.amount }}",
            "paid_to": "={{ $json.output['paid to'] }}",
            "txn_date": "={{ $json.output.date }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "amount",
              "displayName": "amount",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "paid_to",
              "displayName": "paid_to",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "txn_date",
              "displayName": "txn_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        340,
        200
      ],
      "id": "5bedc79f-e244-4c63-a669-ee6228b01dc9",
      "name": "Postgres2",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "amount": "={{ $json.message.content.amount }}",
            "paid_to": "={{ $json.message.content['paid to'] }}",
            "txn_date": "={{ $json.message.content.date }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "amount",
              "displayName": "amount",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "paid_to",
              "displayName": "paid_to",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "txn_date",
              "displayName": "txn_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        320,
        -180
      ],
      "id": "39ef58bf-60d8-4665-9a9f-48383a6b4e11",
      "name": "Postgres",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        760,
        0
      ],
      "id": "e7554125-67d9-480d-87f3-72c093c7719c",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        980,
        0
      ],
      "id": "e85ffe63-3c7b-4bb2-921c-39af745e5e74",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -120,
        40
      ],
      "id": "8b7e736b-18cc-4019-b1dd-9f24eca6fd48",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "JjMmhLRCLv1lEaa6",
          "name": "OpenRouter New"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.snippet }}\nrespond strictly in json format\n{\n  \"amount\": ,\n  \"paid to\": \"\",\n  \"date\": \"2025-05-18T14:12:00\",\n  \n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -120,
        -180
      ],
      "id": "82643418-1682-4db1-8c93-86d62a2430f5",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"amount\": \"777\",\n  \"paid to\": \"fgh\",\n  \"date\": \"2025-05-18T14:12:00\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        100,
        40
      ],
      "id": "1688635b-cb58-47da-a0e0-ca7a9a32e20f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"amount\": \"777\",\n  \"paid to\": \"fgh\",\n  \"date\": \"2025-05-18T14:12:00\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        80,
        360
      ],
      "id": "705d8cdf-f3f8-4ccf-9b5b-1cf99c574729",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart personal expense assistant.\n\n## Expense Data:\nfetch the data from the postgres attached to tool\ngive only single output depends on input\nYou receive structured expense data from a database , and a user’s question in natural language.\n\nEach expense record includes:\n\n- `amount` (in ₹)\n- `paid_to` (e.g., Fuel, Dining, Groceries)\n\n---\n\n## Your Task:\n\n1. Understand the user's query and determine their intent:\n   - Time filter: (e.g., “May”, “last month”, “2024”)\n   - Category filter: (e.g., “fuel”, “dining”, “groceries”)\n   - Type of question: total spent, trends, top categories, comparisons, etc.\n\n2. Analyze the given data and answer the user’s query using:\n   - ✅ Filtered totals (e.g., “You spent ₹4,100 on fuel in May.”)\n   - 📊 Category share (e.g., “Food made up 32% of your May expenses.”)\n   - 🔁 Trend insights (e.g., “Up 8% from April.”)\n   - 🏆 Top categories or vendors\n   - 📉 If spending dropped or increased\n\n3. Write a friendly, human-style response, like:\n   - “You spent ₹12,300 in May. Dining and fuel were your top categories. Compared to April, your total expenses increased by 8%.”\n\n---\n\n## User Query: {{ $json.body.message }}\n\n---\n\n## Output Instructions:\n- Write a clear and concise summary of the spending behavior.\n- Use ₹ with numbers.\n- Mention key insights (totals, category share, trends).\n- End with a helpful offer, like:\n  _“Want to see this as a chart or grouped by vendor?”_",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1060,
        300
      ],
      "id": "b9097889-74ff-4522-901b-27aeb14e27da",
      "name": "AI Agent2",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1300,
        520
      ],
      "id": "b3ef1c9c-c6dd-4d41-8f57-97e0307db179",
      "name": "Postgres5",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1040,
        540
      ],
      "id": "44a51163-b643-4a2a-91b0-08612c461c7f",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "JjMmhLRCLv1lEaa6",
          "name": "OpenRouter New"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook2').item.json.body.message }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1160,
        520
      ],
      "id": "5f7b0421-dd5f-4b35-977c-8e4dacf6d56f",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bill",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -180,
        680
      ],
      "id": "5a20d52d-d23f-4308-8945-51063a64151e",
      "name": "Webhook1",
      "webhookId": "e7b6f562-8677-417c-9a0b-880563af16e1"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "paid_to": "={{ $json.body.merchant }}",
            "txn_date": "={{ $json.body.transaction || $now }}",
            "amount": "={{ $json.body.amount }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "amount",
              "displayName": "amount",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "paid_to",
              "displayName": "paid_to",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "txn_date",
              "displayName": "txn_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        680
      ],
      "id": "d3803a25-8d87-4ac4-85d1-217324f08c1c",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        820,
        300
      ],
      "id": "11f4aa4f-1173-40ce-90e6-66b52eefdc09",
      "name": "Webhook2",
      "webhookId": "6dce7b9e-e63f-40f2-ba1f-78bbc0d6a27b"
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Postgres5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0c86c5d6-223e-47d1-a06e-a1e79da53adb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b49f74740e4a155f21338af76c2aa80263c734ce9c55ab82f1aa145d7b4ee228"
  },
  "id": "QcKuSHPlPOXA8HpI",
  "tags": []
}