{
  "name": "Policy_Change_Notification_Acknowledgment_Tracker",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  (SELECT COUNT(*) FROM policies) AS total_policies,\n  (SELECT COUNT(*) FROM user_acknowledgments WHERE acknowledged = true) AS acknowledged_policies,\n  (SELECT COUNT(*) FROM user_acknowledgments WHERE acknowledged = false) AS pending_acknowledgments",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -280,
        -80
      ],
      "id": "b7f8b1c2-27a6-4a68-9b59-2fcd6b9ee5ea",
      "name": "Fetch Stats",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  p.policy_id AS id,\n  p.policy_name,\n  p.version,\n  CASE \n    WHEN EXISTS(SELECT 1 FROM user_acknowledgments ua WHERE ua.policy_id = p.policy_id AND ua.acknowledged = true) \n    THEN 'ACKNOWLEDGED' \n    ELSE 'PENDING' \n  END AS status,\n  p.publish_date AS publishDate,\n  (SELECT COUNT(*) FROM user_acknowledgments ua WHERE ua.policy_id = p.policy_id AND ua.acknowledged = true) AS acknowledgmentCount\nFROM policies p\nORDER BY p.publish_date DESC\nLIMIT 10",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -280,
        -260
      ],
      "id": "41efe32b-1226-40a9-9bd4-f5b261b73138",
      "name": "Fetch Recent Notifications",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract stats from the last item\nconst stats = {\n  acknowledgedPolicies: parseInt(items[items.length - 1].json.acknowledged_policies, 10) || 0,\n  pendingAcknowledgments: parseInt(items[items.length - 1].json.pending_acknowledgments, 10) || 0,\n  totalPolicies: parseInt(items[items.length - 1].json.total_policies, 10) || 0\n};\n\n// Map the first 10 items (policy items) into recentNotifications\nconst recentNotifications = items.slice(0, 10).map(item => {\n  return {\n    id: item.json.id,\n    policyName: item.json.policy_name,\n    version: item.json.version,\n    status: item.json.status,\n    publishDate: item.json.publishdate,\n    acknowledgmentCount: parseInt(item.json.acknowledgmentcount, 10) || 0\n  };\n});\n\n// Return the final object with stats and recentNotifications\nreturn [\n  {\n    json: {\n      stats: stats,\n      recentNotifications: recentNotifications\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        -180
      ],
      "id": "704ed3fa-c974-48c3-94ac-0fb166a648d8",
      "name": "Finalize Response"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        540,
        40
      ],
      "id": "7c9fbcfb-d3cc-4d00-a4cf-d46bbf5a628f",
      "name": "Fetch All Users",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let attachment = null;\nlet finalFileName = '';\n\n// Check if the source is Webhook or Form submission\nif ($json[\"source\"] === \"webhook\" || $json[\"source\"] === \"form\") {\n    // Webhook/Form attachment (binary field: 'HR_policy')\n    attachment = items[0].binary['HR_policy'];\n    finalFileName = attachment.fileName;\n} else {\n    // Default logic - check for any binary data\n    const binaryKeys = Object.keys(items[0].binary || {});\n    if (binaryKeys.length > 0) {\n        attachment = items[0].binary[binaryKeys[0]];\n        finalFileName = attachment.fileName || 'policy_document.pdf';\n        // Rename the binary field to 'HR_policy' for consistency\n        items[0].binary['HR_policy'] = attachment;\n        if (binaryKeys[0] !== 'HR_policy') {\n            delete items[0].binary[binaryKeys[0]];\n        }\n    } else {\n        finalFileName = 'default_policy.pdf';\n    }\n}\n\n// Ensure the file name is set\nif (attachment) {\n    attachment.fileName = finalFileName;\n}\n\n// Add source identifier for tracking\nitems[0].json.processedFileName = finalFileName;\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        160
      ],
      "id": "837f2e04-68b0-411b-af73-e07acfa41ef8",
      "name": "Process Attachment"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        200,
        380
      ],
      "id": "0102b328-5083-492e-ac1b-f48f4023b989",
      "name": "Daily Reminder Check"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT DISTINCT u.user_id, u.name, u.email \nFROM users u \nWHERE NOT EXISTS (\n  SELECT 1 FROM user_acknowledgments ua \n  WHERE ua.user_id = u.user_id::varchar \n  AND ua.policy_id = '{{ $json.policy_id }}' \n  AND ua.acknowledged = true\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        480,
        400
      ],
      "id": "7438a068-3c83-4408-abab-71608f6ee762",
      "name": "Get Unacknowledged Users",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "policies",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "policy_id": "={{ $json.policy_id }}",
            "policy_name": "={{ $json.policy_name }}",
            "version": "={{ $json.version }}",
            "publish_date": "={{ $now }}"
          },
          "matchingColumns": [
            "policy_id"
          ],
          "schema": [
            {
              "id": "policy_id",
              "displayName": "policy_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "policy_name",
              "displayName": "policy_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "version",
              "displayName": "version",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "publish_date",
              "displayName": "publish_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "e76d730e-9a68-4ba7-9785-6665a923a4b3",
      "name": "Insert Policy",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        60
      ],
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "policy-update",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -620,
        -80
      ],
      "id": "cfdca118-0abd-42a3-9868-719857dfe8e8",
      "name": "Policy Update Webhook",
      "webhookId": "6f405d7c-0a4a-4469-98b1-2d68d097dac3"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "Reminder: Please Acknowledge Policy",
        "message": "=Hi {{ $json.name }},\n\nThis is a reminder to review and acknowledge the policy: {{ $('Set Policy Metadata').item.json.policy_name }}.\n\nðŸ“„ View Policy Document: {{ $('Set Policy Metadata').item.json.policy_url }}\n\nâœ… Click here to acknowledge: {{ $json.ack_link }}\n\nThank you,\nHR Team",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1060,
        340
      ],
      "id": "f66ac61f-422d-4537-abdd-11a193391c58",
      "name": "First Reminder Email",
      "webhookId": "143266e4-8b86-42f0-8db9-59693e8c9f69",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "shyam.qaid@gmail.com",
        "subject": "=Escalation: Policy Not Acknowledged - {{ $json.name }}",
        "message": "=Hi HR Team,\n\nThis is an escalation notice that {{ $json.name }} (User ID: {{ $json.user_id }}) has not yet acknowledged the policy \"{{ $('Set Policy Metadata').item.json.policy_name }}\".\n\nEmployee Details:\n- Name: {{ $json.name }}\n- Email: {{ $json.email }}\n- User ID: {{ $json.user_id }}\n\nPlease follow up with them to complete the acknowledgment.\n\nðŸ”— Acknowledgment Link: {{ $json.ack_link }}\n\nThank you,\nAutomated HR System",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1060,
        540
      ],
      "id": "b807e553-b999-4d07-bf1f-4233d787a682",
      "name": "HR Escalation Email",
      "webhookId": "cd14c5bc-dec4-4f33-a3ab-88fecc673ed8",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "Action Required: Acknowledge New HR Policy",
        "message": "=Hi {{ $json.name }},\n\nA new policy titled '{{ $('Set Policy Metadata').item.json.policy_name }}' has been released. Please review it at the link below:\n\nPolicy Document: {{ $('Set Policy Metadata').item.json.policy_url }}\n\nTo acknowledge that you've read the policy, please click this link:\n{{ $json.ack_link }}\n\nThank you!\nHR Team",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1320,
        60
      ],
      "id": "1517b99d-66e0-4c0a-821e-3d05a94aa47d",
      "name": "Initial Notification Email",
      "webhookId": "b1a260bd-a1d8-45ca-8214-fb1ea0914cdf",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        740,
        40
      ],
      "id": "e4d24f7f-cd9b-4470-9ca9-046b68798f8a",
      "name": "Process Users One by One"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_acknowledgments (policy_id, user_id, acknowledged, last_updated)\nSELECT '{{ $json.policy_id }}', u.user_id::varchar, false, NOW()\nFROM users u\nWHERE NOT EXISTS (\n  SELECT 1 FROM user_acknowledgments ua \n  WHERE ua.policy_id = '{{ $json.policy_id }}' \n  AND ua.user_id = u.user_id::varchar\n)",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        280,
        40
      ],
      "id": "49946718-8667-413e-aa1e-7ee6d3a60fb8",
      "name": "Create Acknowledgment Records",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        620,
        -180
      ],
      "id": "26cacc8c-353e-4550-b8cb-0c9a31399160",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        20,
        -180
      ],
      "id": "c303e593-eed3-4070-9346-da8851b2b4da",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const policyId =$('Insert Policy').first().json.policy_id ;\n  const ackLink = `https://http://localhost:5678//ack?user_id=${item.json.id}&policy_id=${policyId}`;\n  item.json.ack_link = ackLink;\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        40
      ],
      "id": "ce1a4153-3da2-4e69-8d8f-b7970711ef7f",
      "name": "Code"
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "days"
      },
      "id": "c805879e-dbdb-4663-9a05-d0293fb37a10",
      "name": "Wait 3 Days",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        740,
        340
      ],
      "webhookId": "7f56e7c0-7b51-47ac-b1a7-81cfd67d37f6"
    },
    {
      "parameters": {
        "amount": 4,
        "unit": "days"
      },
      "id": "aead5e0a-cc3e-4acc-831f-0e38751baf7b",
      "name": "Wait Additional 4 Days",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        740,
        520
      ],
      "webhookId": "8e7f8bdb-80a3-4e23-a51d-8be23d320554"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "policy_id",
              "value": "HR2025-05"
            },
            {
              "name": "policy_name",
              "value": "={{ $json.processedFileName || 'New HR Policy' }}"
            },
            {
              "name": "version",
              "value": "1.0"
            },
            {
              "name": "policy_url",
              "value": "https://yourdomain.com/policies/HR2025-05"
            }
          ]
        },
        "options": {}
      },
      "id": "32f3355e-1539-400c-8500-f642f541a60f",
      "name": "Set Policy Metadata",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -140,
        40
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Fetch Stats": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch Recent Notifications": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch All Users": {
      "main": [
        [
          {
            "node": "Process Users One by One",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Attachment": {
      "main": [
        [
          {
            "node": "Set Policy Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Reminder Check": {
      "main": [
        [
          {
            "node": "Get Unacknowledged Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Unacknowledged Users": {
      "main": [
        [
          {
            "node": "Wait 3 Days",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait Additional 4 Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Policy": {
      "main": [
        [
          {
            "node": "Create Acknowledgment Records",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Unacknowledged Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Policy Update Webhook": {
      "main": [
        [
          {
            "node": "Process Attachment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Stats",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Recent Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Users One by One": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch All Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Acknowledgment Records": {
      "main": [
        [
          {
            "node": "Fetch All Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Finalize Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Initial Notification Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 Days": {
      "main": [
        [
          {
            "node": "First Reminder Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Additional 4 Days": {
      "main": [
        [
          {
            "node": "HR Escalation Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Policy Metadata": {
      "main": [
        [
          {
            "node": "Insert Policy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ffa167fc-39f2-4e37-b117-2411689364fe",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b49f74740e4a155f21338af76c2aa80263c734ce9c55ab82f1aa145d7b4ee228"
  },
  "id": "8HuN3768E2DCKNGX",
  "tags": []
}