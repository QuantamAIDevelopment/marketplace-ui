{
  "name": "fraud_dectection",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  const user = item.json;\n\n  // Normalize property names to handle variations\n  const shippingAddress = user.shippingAddress || user['SHIPPING ADRES'] || '';\n  const billingAddress = user.billingAddress || user['BILLING ADRESS'] || '';\n  const email = user.email || user.EMAIL || '';\n  const ip = user.ip || user.IP || '';\n  const orderValue = typeof user.orderValue === \"number\" ? user.orderValue : Number(user.orderValue) || 0;\n\n  let level = 0;\n  const rulesTriggered = [];\n\n  // --- Rule 1: Mismatched shipping & billing addresses ---\n  if (shippingAddress && billingAddress && shippingAddress !== billingAddress) {\n    level = 1;\n    rulesTriggered.push(`Mismatched address: ${billingAddress} ≠ ${shippingAddress}`);\n  }\n\n  // --- Rule 2: Disposable or temp email domain ---\n  const disposableDomains = [\"mail-temp.com\", \"protonmail.com\", \"tempmail.com\"];\n  const emailDomain = email.split(\"@\")[1]?.toLowerCase();\n  if (emailDomain && disposableDomains.includes(emailDomain)) {\n    level = 1;\n    rulesTriggered.push(\"Disposable email domain\");\n  }\n\n  // --- Rule 3: Suspicious VPN IP (e.g., starts with 192. or known VPN range) ---\n  const cleanedIp = ip.trim();\n  if (cleanedIp.startsWith(\"192.\") || cleanedIp.startsWith(\"185.\")) {\n    level = 1;\n    rulesTriggered.push(`Suspicious IP: ${cleanedIp}`);\n  }\n\n  // --- Rule 4: High order value (e.g., > ₹10,000) ---\n  if (orderValue > 10000) {\n    level = 1;\n    rulesTriggered.push(`High order value: ₹${orderValue}`);\n  }\n\n  // --- AI Risk Score: 25 points per rule triggered ---\n  const aiRiskScore = Math.min(rulesTriggered.length * 25, 100);\n\n  // --- AI Notes ---\n  const aiNotes = rulesTriggered.length\n    ? `Flagged for: ${rulesTriggered.join(\"; \")}`\n    : \"No suspicious behavior detected.\";\n\n  // --- Risk Level Classification ---\n  let finalRiskLevel = \"Low\";\n  if (aiRiskScore >= 75) finalRiskLevel = \"High\";\n  else if (aiRiskScore >= 50) finalRiskLevel = \"Medium\";\n\n  return {\n    json: {\n      ...user,\n      shippingAddress,\n      billingAddress,\n      email,\n      ip,\n      triggeredRules: rulesTriggered,\n      aiRiskScore,\n      aiNotes,\n      finalRiskLevel\n    }\n  };\n});\n\nreturn updatedItems;\n "
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2960,
        -300
      ],
      "id": "101c9c70-e785-4aa9-9504-57a2437af312",
      "name": "Apply Fraud Rules"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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 "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=  {\n  \"model\": \"llama3-70b-8192\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a fraud detection assistant. Analyze transaction data and return a JSON response in this format:\\n{\\n  \\\"score\\\": 0–100,\\n  \\\"notes\\\": \\\"Reason for the score\\\"\\n}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Analyze this transaction:\\n\\nOrder ID: {{ $json['ORDER ID'] || $json.orderId }}\\nUser ID: {{ $json['USER ID'] || $json.userId }}\\nEmail ID: {{ $json.EMAIL || $json.email }}\\nIP Address: {{ $json.IP || $json.ip }}\\nBilling Address: {{ $json['BILLING ADRESS'] || $json.billingAddress }}\\nShipping Address: {{ $json['SHIPPING ADRES'] || $json.shippingAddress }}\\n\\nTriggered Rules: {{ $json.triggeredRules?.join(', ') || 'None' }}\\nRisk Score (AI): {{ $json.aiRiskScore }}\\nAI Notes: {{ $json.aiNotes }}\\nFinal Risk Level: {{ $json.finalRiskLevel }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2700,
        -300
      ],
      "id": "07ab7889-d3a3-4b02-8300-70a8e61fbcf4",
      "name": "Send to AI Fraud Model"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e11b7522-afbd-4893-b7ba-bdd067146c5f",
              "leftValue": "={{ $json.score }}",
              "rightValue": 95,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            },
            {
              "id": "ddc1eec6-51ae-46a0-b636-458d957b7763",
              "leftValue": "={{ $json.score }}",
              "rightValue": 85,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2120,
        -300
      ],
      "id": "dea07401-3d7c-4e64-b687-feb01ed318e1",
      "name": "Alert & Escalation"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM",
          "mode": "list",
          "cachedResultName": "n8n-work-book",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1074431517,
          "mode": "list",
          "cachedResultName": "fraud-detection",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/17YgQhJbBsi9HHlQ1dwj48Q2AT7Me52UPaxDUtrX-FsM/edit#gid=1074431517"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "order_id": "={{ $json.order_id }}",
            "rules_triggered": "={{ $json.rules_triggered }}",
            "ai_notes": "={{ $json.ai_notes }}",
            "final_action": "={{ $json.final_action }}",
            "feedback": "={{ $json.feedback }}",
            "reviewed": "={{ $json.reviewed }}",
            "created_at": "={{ $json.created_at }}",
            "updated_at": "={{ $json.updated_at }}",
            "risk_score": "={{ $json.risk_score }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "order_id",
              "displayName": "order_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "risk_score",
              "displayName": "risk_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "rules_triggered",
              "displayName": "rules_triggered",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ai_notes",
              "displayName": "ai_notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "final_action",
              "displayName": "final_action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "feedback",
              "displayName": "feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "reviewed",
              "displayName": "reviewed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -2400,
        -60
      ],
      "id": "74636afd-9310-4d93-aba9-61bdd764c059",
      "name": "Manual Review Panel",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "zEaLif2NVdOGF6k8",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": " const items = $input.all();\nconst fallback = $('Apply Fraud Rules').first()?.json || {};\n\nconst results = items.map(item => {\n  const original = item.json || {};\n  const content = original.choices?.[0]?.message?.content;\n\n  // Handle missing or invalid content\n  if (typeof content !== 'string') {\n    return {\n      json: {\n        error: 'Invalid or missing content',\n        score: 0,\n        notes: 'No notes provided',\n        rawContext: original\n      }\n    };\n  }\n\n  // Extract JSON block from content\n  const jsonMatch = content.match(/\\{[\\s\\S]*?\\}/);\n  if (!jsonMatch) {\n    return {\n      json: {\n        error: 'No valid JSON block found in content',\n        score: 0,\n        notes: 'No notes provided',\n        rawContext: content\n      }\n    };\n  }\n\n  let parsed;\n  try {\n    parsed = JSON.parse(jsonMatch[0]);\n  } catch (e) {\n    return {\n      json: {\n        error: `JSON parsing error: ${e.message}`,\n        score: 0,\n        notes: 'No notes provided',\n        rawContext: content\n      }\n    };\n  }\n\n  return {\n    json: {\n      score: parsed.fraudScore ?? parsed.score ?? 0,\n      notes: parsed.notes ?? 'No notes provided',\n      rawContext: content\n    }\n  };\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2420,
        -300
      ],
      "id": "194913f8-a4e5-4b73-a56a-a4bf5f361241",
      "name": "this code We can use for fraud score notes and raw content"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "emailType": "text",
        "message": "=⚠️ High-Risk Transaction ⚠️  \nALERTto OPERATIONS TEAM \n{{ $json.body }} \n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1580,
        -280
      ],
      "id": "4afdf37c-9a13-4b1f-be79-8d4714a823da",
      "name": "Alert to Operations team",
      "webhookId": "a8ceca87-5fe0-4ea9-96e3-cec6a7b6f5a8",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "sssaradhi08@gmail.com",
        "subject": "=☠️ Fraud Alert -fraud check failure-{{ $json.subject }} ,☠️",
        "emailType": "text",
        "message": "=🚨 Fraud Check Failed🚨\n⚠️Fraud DETECTED ⚠️\n {{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1480,
        -60
      ],
      "id": "e40cbc35-70e3-4b8c-986e-30a4909c1ef9",
      "name": "Email Alert to fraud/or opsNode",
      "webhookId": "611d7c30-5ea5-4940-9f95-859283580d80",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "binaryPropertyName": "fraud-list",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -3220,
        -300
      ],
      "id": "70d862f1-cab4-4a6a-a995-dfa48948d7e7",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": " const items = $input.all();\nconst fallback = items[0]?.json || {};\nconst applyFraudRules = $('Apply Fraud Rules').first()?.json || {};\n\n// Utility: Return the first valid value in order\nconst getValue = (primary, ...fallbacks) => {\n  for (const val of [primary, ...fallbacks]) {\n    if (val !== undefined && val !== null && val !== '') return val;\n  }\n  return 'N/A';\n};\n\nconst rows = items.map((item, index) => {\n  const data = item.json || {};\n\n  const score = getValue(data.score, fallback.score, applyFraudRules.score, 0);\n  const notes = getValue(data.notes, fallback.notes, applyFraudRules.notes, 'No notes provided');\n  const rawContext = getValue(data.rawContext, fallback.rawContext, applyFraudRules.rawContext, {});\n\n  return `\nTransaction #${index + 1}\n--------------------------\n🧮 Score : ${score}\n📝 Notes : ${notes}\n\n🗂️ Raw Context:\n${typeof rawContext === 'string'\n    ? rawContext\n    : JSON.stringify(rawContext, null, 2)\n  }\n`;\n});\n\nconst emailBody = `\n📋 AI Fraud Risk Summary\n\nHere are the fraud analysis results from the AI detection system:\n\n${rows.join('\\n')}\n`;\n\nreturn [\n  {\n    json: {\n      to: \"pardhasaradhisiripuram@gmail.com\",\n      subject: \"AI Fraud Risk Summary Report\",\n      body: emailBody,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1820,
        -280
      ],
      "id": "3e246595-88c2-4737-808d-fcace4c67ac5",
      "name": "Code"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fraud-detection",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3520,
        -200
      ],
      "id": "605f596a-0e88-4bca-89d6-66fe6789bfe6",
      "name": "Webhook",
      "webhookId": "68e5ec10-a21b-4ab9-9950-79b3bc46910f"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "fraud_c",
          "mode": "list",
          "cachedResultName": "fraud_c"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "reviewed": true,
            "order_id": "={{ $json['ORDER ID'] }}",
            "risk_score": "={{ $json.aiRiskScore }}",
            "rules_triggered": "={{ $json.triggeredRules }}",
            "ai_notes": "={{ $json.aiNotes }}",
            "final_action": "order on hold",
            "feedback": "confiorm fraud",
            "created_at": "={{ $now }}",
            "updated_at": "={{ $now }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "order_id",
              "displayName": "order_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "risk_score",
              "displayName": "risk_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "rules_triggered",
              "displayName": "rules_triggered",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true
            },
            {
              "id": "ai_notes",
              "displayName": "ai_notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "final_action",
              "displayName": "final_action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "feedback",
              "displayName": "feedback",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "reviewed",
              "displayName": "reviewed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2700,
        -40
      ],
      "id": "a1398344-95f4-4d79-8522-9b6f49872708",
      "name": "Postgres2",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst fallback = items[0]?.json || {};\nconst applyFraudRules = $('Apply Fraud Rules').first()?.json || {};\n\n// Helper function to safely get a value from multiple sources\nconst getValue = (data, keys, defaultValue = 'N/A') => {\n  for (const key of keys) {\n    if (key in data && data[key]) return data[key];\n    if (key in fallback && fallback[key]) return fallback[key];\n    if (key in applyFraudRules && applyFraudRules[key]) return applyFraudRules[key];\n  }\n  return defaultValue;\n};\n\nconst rows = items.map((item, index) => {\n  const data = item.json || {};\n\n  const orderId = getValue(data, ['order_id', 'ORDER ID']);\n  const riskScore = getValue(data, ['risk_score']);\n  const feedback = getValue(data, ['feedback'], 'None');\n  const aiNotes = getValue(data, ['ai_notes', 'AI NOTES'], 'No AI notes provided');\n  const finalAction = getValue(data, ['final_action', 'FINAL ACTION'], 'Pending');\n  const orderStatus = getValue(data, ['order_status', 'status'], 'Pending');\n\n\n  // Triggered Rules\n  let triggeredRules = 'None';\n  const triggered = data.rules_triggered || fallback.rules_triggered || applyFraudRules.rules_triggered;\n  if (Array.isArray(triggered) && triggered.length > 0) {\n    triggeredRules = triggered.join(', ');\n  }\n\n  return `\nTransaction #${index + 1}\n--------------------------\n🆔 Order ID        : ${orderId}\n📊 Risk Score      : ${riskScore}\n🚨 Triggered Rules : ${triggeredRules}\n📢 Feedback        : ${feedback}\n🤖 AI Notes        : ${aiNotes}\n✅ Final Action    : ${finalAction}\n📈 Order Status    : ${orderStatus}\n`;\n});\n\nconst emailBody = `\n📋 Fraud Risk Analysis Report\n\nHere are the fraud analysis results from the AI detection system:\n\n${rows.join('\\n')}\n`;\n\nreturn [\n  {\n    json: {\n      to: \"sssaradhi08@gmail.com\",  // Replace with your actual email\n      subject: \"Potential Fraud Detected – AI Risk Analysis Report\",\n      body: emailBody,\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2100,
        -60
      ],
      "id": "ae88221f-b508-4ba5-80b5-e69681d4f01c",
      "name": "Code1"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -1600,
        120
      ],
      "id": "f70cbc87-67ef-49c9-9c36-2399558be49d",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst input = $(\"Code1\").first().json.body;  // Access the input body directly\n\n// Split by each transaction using a pattern that marks new transactions\nconst transactions = input.split(/Transaction #\\d+/).filter(t => t.trim() !== '');\n\n// Define a helper function to extract field values\nfunction extractField(text, fieldLabel) {\n    const regex = new RegExp(`${fieldLabel}\\\\s*:\\\\s*(.+?)\\\\n`);\n    const match = text.match(regex);\n    return match ? match[1].trim() : null;\n}\n\n// Process each transaction, skipping any empty or invalid entries\nconst results = transactions.map(tx => {\n    return {\n        \"Order ID\": extractField(tx, 'Order ID'),\n        \"Risk Score\": Number(extractField(tx, 'Risk Score')) || 0,\n        \"Triggered Rules\": extractField(tx, 'Triggered Rules')?.split(',').map(s => s.trim()).filter(Boolean) || [],\n        \"Feedback\": extractField(tx, 'Feedback'),\n        \"AI Notes\": extractField(tx, 'AI Notes'),\n        \"Final Action\": extractField(tx, 'Final Action'),\n        \"Order Status\": extractField(tx, 'Order Status'),\n    };\n}).filter(r => r[\"Order ID\"] !== null);  // Remove empty/invalid transactions\n\nreturn results.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1880,
        -60
      ],
      "id": "77265e73-b93e-48b0-a6a0-30b83dcaff11",
      "name": "Code2"
    }
  ],
  "pinData": {},
  "connections": {
    "Apply Fraud Rules": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send to AI Fraud Model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to AI Fraud Model": {
      "main": [
        [
          {
            "node": "this code We can use for fraud score notes and raw content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alert & Escalation": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Review Panel": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "this code We can use for fraud score notes and raw content": {
      "main": [
        [
          {
            "node": "Alert & Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Apply Fraud Rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Alert to Operations team",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "Manual Review Panel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Email Alert to fraud/or opsNode",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c853f891-cbcf-4f9b-a92c-50439a623c73",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b49f74740e4a155f21338af76c2aa80263c734ce9c55ab82f1aa145d7b4ee228"
  },
  "id": "SOXMyUqq9A1iKpVm",
  "tags": []
}