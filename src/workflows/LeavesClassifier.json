{
  "name": "LeavesClassifier",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "leaves-classifier",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f6ebfd02-eba0-45e3-9391-9026bdd97406",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -620,
        980
      ],
      "typeVersion": 1,
      "webhookId": "e1a9cab2-cceb-40ab-809f-99e875b3103e"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "707da048a6c4934c804713d054d431ebd698f7ffa1a572913d22cba7c61a5cf6@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Leaves"
        },
        "options": {}
      },
      "id": "b310230e-0f0d-4595-bf9c-5c4d23d17824",
      "name": "Get Calendar Events",
      "type": "n8n-nodes-base.googleCalendar",
      "position": [
        -400,
        980
      ],
      "typeVersion": 1,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "hoBXlEkCqra0V1dX",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ba3b1c44-fed0-49ab-b563-f53a0bee6c1c",
              "leftValue": "={{ $json.status }}",
              "rightValue": "confirmed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -160,
        980
      ],
      "id": "c088ea96-7324-4fc9-8b71-f1a35ffc618f",
      "name": "Filter Confirmed Events"
    },
    {
      "parameters": {
        "inputText": "={{ $json.summary }}",
        "categories": {
          "categories": [
            {
              "category": "Casual Leaves",
              "description": "=Casual Leave"
            },
            {
              "category": "=Sick Leaves",
              "description": "Sick Leave"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        220,
        940
      ],
      "id": "3cf05185-eefd-499a-b138-458d52cc2234",
      "name": "Classify Events"
    },
    {
      "parameters": {},
      "id": "800ab682-21e4-4b44-b24d-96624a501a6e",
      "name": "Merge Data",
      "type": "n8n-nodes-base.merge",
      "position": [
        1520,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst stats = {\n  casualLeaves: 0,\n  sickLeaves: 0,\n  totalEmployees: 50, // Replace with dynamic count if available\n  activeRequests: 0\n};\n\nconst recentActivity = [];\n\nfor (const item of items) {\n  const type = item.json.Type;\n  const days = parseInt(item.json.Days || 0);\n  const status = item.json.Status || 'APPROVED';\n\n  // Count leaves\n  if (type === 'Casual Leave') {\n    stats.casualLeaves += days;\n  } else if (type === 'Sick Leave') {\n    stats.sickLeaves += days;\n  }\n\n  // Track active requests\n  if (status === 'PENDING' || status === 'APPROVED') {\n    stats.activeRequests += 1;\n  }\n\n  // Add to recent activity\n  recentActivity.push({\n    id: item.json.id || Math.random().toString(36).substr(2, 9),\n    employeeName: item.json.Name,\n    leaveType: type?.toUpperCase() || 'UNKNOWN',\n    status: status,\n    startDate: item.json.startDate ,\n    endDate: item.json.endDate ,\n    timestamp: new Date().toISOString()\n  });\n}\n\nreturn [{\n  json: {\n    stats,\n    recentActivity\n  }\n}];\n"
      },
      "id": "49351324-7c5b-4554-a56f-474ae6bf417d",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "position": [
        1920,
        1120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Workflow Documentation\n\nThis workflow is designed to classify and summarize leave requests from a Google Calendar. Here's a breakdown of each node's function:\n\n1.  **Webhook**: This node acts as the entry point for the workflow, triggering it when an external HTTP request is received. It expects `startDate` and `endDate` in its body.\n\n2.  **Get Calendar Events**: Fetches events from a specified Google Calendar within the `startDate` and `endDate` provided by the Webhook.\n\n3.  **Filter Confirmed Events**: Filters the calendar events, ensuring only those with a \"confirmed\" status proceed.\n\n4.  **Classify Events**: Uses a Groq Chat Model (LLM) to classify the event summaries into \"Casual Leaves\" or \"Sick Leaves\".\n\n5.  **Filter Holiday Days** & **Filter Illness Days**: These Set nodes process the classified events. They extract the employee's email (Name), calculate the duration of the leave (Days), and assign the correct \"Type\" (Casual Leave or Sick Leave).\n\n6.  **Combine Holiday Counts** & **Combine Illness Counts**: These Code nodes aggregate the casual and sick leave days, respectively, by employee name, providing a total count for each type of leave per person.\n\n7.  **Merge Data**: Combines the processed data from both \"Combine Holiday Counts\" and \"Combine Illness Counts\" branches into a single data stream.\n\n8.  **Format Response**: This final Code node formats the aggregated leave data and recent activity into a structured JSON response, ready to be sent back to the requesting system. It includes statistics on casual and sick leaves, total employees, and active requests, along with a log of recent leave activities.",
        "height": 500,
        "width": 1300
      },
      "type": "n8n-nodes-base.stickyNote",
      "name": "Workflow Documentation",
      "position": [
        0,
        0
      ],
      "id": "72ebd0fa-41a0-4594-b061-b21bbb26de12",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ðŸš€ Initial Data Flow\n\nThis section handles the initiation of the workflow and the initial data retrieval and filtering:\n\n1.  **Webhook**: This node acts as the entry point, triggering the workflow upon receiving an HTTP request. It's configured to listen for `GET` requests on `api/leaves/classifier`.\n2.  **Get Calendar Events**: Connects to Google Calendar to fetch events within a specified date range (from the webhook body). It retrieves all events from the \"Leaves\" calendar.\n3.  **Filter Confirmed Events**: An If node that filters the incoming calendar events, passing only those with a `status` of \"confirmed\" to the next stage.",
        "height": 560,
        "width": 680,
        "color": 5
      },
      "name": "Initial Data Flow",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -680,
        640
      ],
      "id": "755369bd-aed2-4e02-a4b7-88aef632e1b2",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ðŸ¤– Event Classification\n\nThis part of the workflow uses AI to categorize the confirmed events:\n\n1.  **Classify Events**: This node utilizes a connected AI Language Model (Groq Chat Model) to classify the `summary` of each calendar event into predefined categories like \"Casual Leaves\" or \"Sick Leaves\".\n2.  **Groq Chat Model**: This node provides the AI capabilities for the `Classify Events` node, using the `llama-3.3-70b-versatile` model to perform text classification.",
        "height": 620,
        "width": 480,
        "color": 7
      },
      "name": "Event Classification (AI)",
      "position": [
        100,
        620
      ],
      "type": "n8n-nodes-base.stickyNote",
      "id": "658acc23-9b8c-4e4c-a353-3d784386acca",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ðŸ“Š Leave Type Data Preparation\n\nAfter classification, events are separated and prepared based on their leave type:\n\n1.  **Filter Holiday Days**: This Set node processes events classified as \"Casual Leaves\". It extracts the employee's `Name` (email), calculates the `Days` duration, and sets the `Type` to \"Casual Leave\".\n2.  **Filter Illness Days**: Similar to the above, this Set node handles events classified as \"Sick Leaves\". It extracts the `Name`, calculates the `Days` duration, and sets the `Type` to \"Sick Leave\".",
        "height": 660,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "name": "Leave Type Data Preparation",
      "position": [
        620,
        560
      ],
      "id": "c67ab933-29b7-46c3-91c7-eb6ce9d3f655",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ðŸ”„ Data Aggregation & Merging\n\nThis section aggregates the prepared leave data and merges it for final processing:\n\n1.  **Combine Holiday Counts**: A Code node that processes all \"Casual Leave\" items. It groups them by employee `Name` and sums up the `Days` for each employee, creating a consolidated record.\n2.  **Combine Illness Counts**: Similarly, this Code node processes \"Sick Leave\" items, grouping them by `Name` and summing their `Days` to provide consolidated sick leave data.\n3.  **Merge Data**: This node combines the output from `Combine Holiday Counts` and `Combine Illness Counts` into a single dataset, allowing for unified processing in the next step.",
        "height": 660,
        "width": 600,
        "color": 6
      },
      "position": [
        1140,
        560
      ],
      "name": "Data Aggregation & Merging",
      "type": "n8n-nodes-base.stickyNote",
      "id": "50f8ad12-1250-465a-a190-4b0b683bb3fb",
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ðŸ“¤ Final Response Formatting\n\nThis final step structures the aggregated data into the desired output format:\n\n1.  **Format Response**: A Code node that takes the merged data and calculates overall statistics (e.g., total casual leaves, sick leaves, active requests) and compiles a `recentActivity` array. The `totalEmployees` is a hardcoded value in this workflow, but is noted that it should be fetched from an employee database. It then returns a single JSON object containing these `stats` and `recentActivity`.",
        "height": 500,
        "width": 400,
        "color": 7
      },
      "position": [
        1780,
        780
      ],
      "name": "Final Response Formatting",
      "type": "n8n-nodes-base.stickyNote",
      "id": "fac3d7b2-93b3-48b6-91e0-e84ce2a19736",
      "typeVersion": 1
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "Name",
              "value": "={{ $json.description }}"
            },
            {
              "name": "Days",
              "value": "={{    Math.round(     (new Date($json.end.date).getTime() - new Date($json.start.date).getTime()) / (1000 * 3600 * 24)   )  }}"
            },
            {
              "name": "Type",
              "value": "Casual Leave"
            }
          ]
        },
        "options": {}
      },
      "id": "525946f2-6cf5-4462-bac3-4f38cbf363c7",
      "name": "Filter Holiday Days1",
      "type": "n8n-nodes-base.set",
      "position": [
        740,
        1040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "Name",
              "value": "={{ $json.description }}"
            },
            {
              "name": "Days",
              "value": "={{    Math.round(     (new Date($json.end.date).getTime() - new Date($json.start.date).getTime()) / (1000 * 3600 * 24)   )  }}"
            },
            {
              "name": "Type",
              "value": "Sick Leave"
            }
          ]
        },
        "options": {}
      },
      "id": "aea41042-544b-4ea6-a2ee-7073381027df",
      "name": "Filter Illness Days1",
      "type": "n8n-nodes-base.set",
      "position": [
        740,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "let items = $input.all();\nlet names = items.map(e => e.json.Name);\nlet unique_names = [...new Set(names)];\n\nlet results = [];\n\nfor (let name of unique_names) {\n  let matching_items = items.filter(e => e.json.Name === name);\n  \n  let totalDays = matching_items.reduce((sum, entry) => {\n    return sum + parseInt(entry.json.Days);\n  }, 0);\n\n  // Use first matching item as base for Type\n  let type = matching_items[0].json.Type;\n\n  results.push({\n    json: {\n      Name: name,\n      Days: totalDays,\n      Type: type\n    }\n  });\n}\n\nreturn results;\n"
      },
      "id": "2c244681-c2e9-4752-b70d-e9001b4ffa1a",
      "name": "Combine Holiday Counts1",
      "type": "n8n-nodes-base.code",
      "position": [
        1320,
        1040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "let items = $input.all();\nlet names = items.map(e => e.json.Name);\nlet unique_names = [...new Set(names)];\n\nlet results = [];\n\nfor (let name of unique_names) {\n  let matching_items = items.filter(e => e.json.Name === name);\n  \n  let totalDays = matching_items.reduce((sum, entry) => {\n    return sum + parseInt(entry.json.Days)\n  }, 0);\n\n  // Use first matching item as base for Type\n  let type = matching_items[0].json.Type;\n\n  results.push({\n    json: {\n      Name: name,\n      Days: totalDays,\n      Type: type\n    }\n  });\n}\n\nreturn results;\n"
      },
      "id": "efa057df-c6a2-4ab8-8fd9-01630e844139",
      "name": "Combine Illness Counts1",
      "type": "n8n-nodes-base.code",
      "position": [
        1320,
        840
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        220,
        1120
      ],
      "id": "41b61b4a-2fc4-4578-a4f5-f267f5ff9042",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "guIZYkPOUz899bc4",
          "name": "Groq account 7"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.recentActivity }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2320,
        1120
      ],
      "id": "6a407463-9dd4-4113-9eba-e42873a50458",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Calendar Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar Events": {
      "main": [
        [
          {
            "node": "Filter Confirmed Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Confirmed Events": {
      "main": [
        [
          {
            "node": "Classify Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Events": {
      "main": [
        [
          {
            "node": "Filter Illness Days1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filter Holiday Days1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Holiday Days1": {
      "main": [
        [
          {
            "node": "Combine Holiday Counts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Illness Days1": {
      "main": [
        [
          {
            "node": "Combine Illness Counts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Holiday Counts1": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Combine Illness Counts1": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Classify Events",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8b4facbc-5d04-44b5-9bdb-8fb7142c160c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4da3e4feddd42df58fa861bd27ff786155b680eb2d7948e126da15f5d08ab036"
  },
  "id": "97CCyJH5o1TFrK4x",
  "tags": []
}