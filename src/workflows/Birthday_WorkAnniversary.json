{
  "name": "Birthday-WorkAnniversary",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "weeksInterval": 7,
              "triggerAtDay": [
                1,
                2,
                3,
                4,
                5,
                6,
                0
              ],
              "triggerAtHour": 9,
              "triggerAtMinute": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1380,
        -40
      ],
      "id": "67a1fd7f-e2c9-426d-9b70-bd2313fd162a",
      "name": "Schedule Trigger",
      "notesInFlow": true,
      "notes": "Repeat every day\n\nTime: 09:00"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Generate birthdays and work Anniversaries messages').item.json.email }}",
        "subject": "🎉 Today's Celebrations",
        "message": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        420,
        160
      ],
      "id": "05c3dc9c-b319-4a8c-bf00-efa395a97f5b",
      "name": "Gmail",
      "webhookId": "d95faa59-2c7f-4704-adc1-47c56f151028",
      "credentials": {
        "gmailOAuth2": {
          "id": "Yzw60DakUdeHKqfQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "8a503482-a330-424f-b5b0-2fb3bc9b7b78",
              "leftValue": "{{ $('Schedule Trigger').item.json['Day of week'] }}",
              "rightValue": "Saturday",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "cf494e77-3878-4408-99d3-94a5e27c7af2",
              "leftValue": "={$('Schedule Trigger').item.json['Day of week'] }}",
              "rightValue": "Sunday",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "b645c941-5dc2-4621-be59-082a740c319b",
              "leftValue": "return new Date().getDay() !== 0 && new Date().getDay() !== 6;",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1020,
        40
      ],
      "id": "50854f5f-8fd4-4139-ac8b-60a2045273c0",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map((item) => item.json);\nconst today = new Date();\n\n// Calculate Saturday and Sunday dates (i.e., last 2 days)\nconst saturday = new Date(today);\nsaturday.setDate(today.getDate() - 2);\n\nconst sunday = new Date(today);\nsunday.setDate(today.getDate() - 1);\n\n// Helper to match only MM-DD regardless of year\nconst formatMD = (date) => `${date.getMonth() + 1}-${date.getDate()}`;\n\nconst saturdayMD = formatMD(saturday);\nconst sundayMD = formatMD(sunday);\n\nconst results = [];\n\nfor (const item of items) {\n  const birthday = new Date(item.Birthday);\n  const anniversary = new Date(item[\"Work Aniverssery\"]);\n\n  if (formatMD(birthday) === saturdayMD || formatMD(birthday) === sundayMD) {\n    item.isBirthday = true;\n  }\n\n  if (\n    formatMD(anniversary) === saturdayMD ||\n    formatMD(anniversary) === sundayMD\n  ) {\n    item.isAnniversary = true;\n  }\n\n  results.push(item);\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        20
      ],
      "id": "807ec228-0adf-4c02-ab22-7d326768b50a",
      "name": "Code2",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all().map((item) => item.json);\nconst updatedItems = items.map((item) => {\n  if (item.execution && item.execution.error) {\n    // handle error\n  } else {\n    // process item\n  }\n  return item;\n});\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        240
      ],
      "id": "3feccb12-2948-4d3b-8fe2-f6fc674d4637",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        840,
        240
      ],
      "id": "59822517-293f-44b0-a673-cc67359aaec1",
      "name": "Error Trigger"
    },
    {
      "parameters": {
        "jsCode": " const day = new Date().getDay();\nif (day === 0 || day === 6) {\n  return []; // Skip if Saturday (6) or Sunday (0)\n}\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1180,
        -40
      ],
      "id": "496d5808-a527-4986-a401-4bd83fcf47c0",
      "name": "Code for skip weekends"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst today = new Date();\nconst padZero = (n) => (n < 10 ? \"0\" + n : n.toString());\n\n// Format today's MM-DD\nconst todayMD = `${padZero(today.getMonth() + 1)}-${padZero(today.getDate())}`;\n\nconst results = items.map((item) => {\n  const birthday = new Date(item.json.birthday);\n  const anniversary = new Date(item.json.work_anniversary);\n\n  // Format birthday and anniversary as MM-DD\n  const birthdayMD = `${padZero(birthday.getMonth() + 1)}-${padZero(birthday.getDate())}`;\n  const anniversaryMD = `${padZero(anniversary.getMonth() + 1)}-${padZero(anniversary.getDate())}`;\n\n  // Compare with today's MM-DD\n  const isBirthday = birthdayMD === todayMD;\n  const isAnniversary = anniversaryMD === todayMD;\n\n  return { ...item.json, isBirthday, isAnniversary };\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        120
      ],
      "id": "d5b7b119-0a2d-4a0a-b77b-aa1c95194259",
      "name": "Fiter today birthdays and anniversaries",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"greeting\": {\n    \"name\": \"{{ $json.name }}\",\n    \"message\": \"{{ $json.isBirthday ? '🎂 Happy Birthday, ' + $json.name + '!' : '' }}{{ $json.isAnniversary ? '🎉 Happy Year Work Anniversary, ' + $json.name : '' }}\"\n  },\n  \"details\": {\n    \"email\": \"{{ $json.email }}\",\n    \"birthday\": \"{{ new Date($json.birthday).toLocaleDateString() }}\",\n    \"work_anniversary\": \"{{ new Date($json.work_anniversary).toLocaleDateString() }}\",\n    \"isBirthday\": \"{{ $json.isBirthday }}\",\n    \"isAnniversary\": \"{{ $json.isAnniversary }}\"\n  },\n  \"message_format\": {\n    \"header\": \"Greetings from QAID Software Pvt Ltd\",\n    \"footer\": \"Wishing you all the best, \\n QAID Team Name]\"\n  }\n}\n",
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        160
      ],
      "id": "161077b9-42ca-4719-9f20-1189ed89f24f",
      "name": "Generate birthdays and work Anniversaries messages"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id, \n  name, \n  email, \n  TO_CHAR(birthday, 'YYYY-MM-DD') AS birthday,\n  TO_CHAR(work_anniversary, 'YYYY-MM-DD') AS work_anniversary\nFROM public.birthday_anniversary\nWHERE \n    (EXTRACT(MONTH FROM birthday) = EXTRACT(MONTH FROM TO_DATE('{{ $json.body.date }}', 'YYYY-MM-DD')) \n     AND EXTRACT(DAY FROM birthday) = EXTRACT(DAY FROM TO_DATE('{{ $json.body.date }}', 'YYYY-MM-DD')))\n   OR\n    (EXTRACT(MONTH FROM work_anniversary) = EXTRACT(MONTH FROM TO_DATE('{{ $json.body.date }}', 'YYYY-MM-DD'))\n     AND EXTRACT(DAY FROM work_anniversary) = EXTRACT(DAY FROM TO_DATE('{{ $json.body.date }}', 'YYYY-MM-DD')));\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -440,
        120
      ],
      "id": "30e5c13c-27b2-4188-8f6f-df452010cf1b",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "birthday_anniversary_logs",
          "mode": "list",
          "cachedResultName": "birthday_anniversary_logs"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "threadId": "={{ $json.threadId }}",
            "labelIds": "={{ $json.labelIds }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "threadId",
              "displayName": "threadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "labelIds",
              "displayName": "labelIds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1420,
        40
      ],
      "id": "a3db2664-1b1a-43ab-b667-f58f478f6539",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "ombHCedKDy5YY5fq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "birthday-anniversary",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "3c07c996-95b8-453f-ac9c-50d33c00b3d9",
      "name": "API Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1360,
        240
      ],
      "webhookId": "birthday-anniversary-api"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "3e462753-2ba8-4267-a815-f9c82c68d586",
      "name": "Merge Triggers",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -780,
        120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add trigger type for API requests\nif (Object.keys($json).length === 0) {\n  // If empty request body\n  return [{\n    json: {\n      trigger_type: 'api',\n      date: new Date().toISOString().split('T')[0],  // Current date in YYYY-MM-DD\n      custom_date: null\n    }\n  }];\n}\n\n// If request has a specific date\nreturn [{\n  json: {\n    ...$json,\n    trigger_type: 'api',\n    date: $json.date || new Date().toISOString().split('T')[0],\n    custom_date: $json.date ? true : false\n  }\n}];"
      },
      "id": "a8879048-c3b1-4607-94b0-4aa75e28f961",
      "name": "Process API Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1100,
        220
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add trigger type for scheduled runs\nreturn items.map(item => ({\n  json: {\n    ...item.json,\n    trigger_type: 'schedule',\n    date: new Date().toISOString().split('T')[0],\n    custom_date: false\n  }\n}));"
      },
      "id": "af172bfd-5c8f-4a9d-a68b-a3e31bc6d851",
      "name": "Process Schedule",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -980,
        0
      ]
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Personalized Greeting</title>\n  <style>\n    body, h1, h2, p, div {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n\n    body {\n      font-family: 'Arial', sans-serif;\n      background-color: #f7f9fc;\n      padding: 20px;\n    }\n\n    .container {\n      background-color: #ffffff;\n      border-radius: 12px;\n      padding: 40px;\n      width: 80%;\n      max-width: 800px;\n      margin: auto;\n      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n      animation: fadeIn 1s ease-in-out;\n    }\n\n    h1 {\n      text-align: center;\n      font-size: 36px;\n      color: #ff6d5a;\n      font-weight: bold;\n      margin-bottom: 20px;\n      animation: slideIn 1.5s ease-out;\n    }\n\n    h2 {\n      text-align: center;\n      font-size: 20px;\n      color: #909399;\n      margin-bottom: 30px;\n    }\n\n    .message-box {\n      background-color: #f8f8f8;\n      padding: 20px;\n      border-radius: 10px;\n      border: 1px solid #e0e0e0;\n      margin: 30px 0;\n      text-align: center;\n      animation: fadeIn 1.5s ease-in-out;\n    }\n\n    .message-box p {\n      font-size: 16px;\n      color: #333;\n      line-height: 1.6;\n    }\n\n    .btn {\n      display: inline-block;\n      padding: 12px 25px;\n      background-color: #ff6d5a;\n      color: #fff;\n      text-decoration: none;\n      font-weight: bold;\n      border-radius: 50px;\n      margin-top: 20px;\n      text-transform: uppercase;\n      transition: background-color 0.3s ease;\n    }\n\n    .btn:hover {\n      background-color: #f48c7c;\n    }\n\n    .footer {\n      text-align: center;\n      margin-top: 40px;\n      color: #909399;\n      font-size: 14px;\n    }\n\n    @keyframes fadeIn {\n      0% {\n        opacity: 0;\n        transform: translateY(10px);\n      }\n      100% {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n\n    @keyframes slideIn {\n      0% {\n        transform: translateX(-30px);\n        opacity: 0;\n      }\n      100% {\n        transform: translateX(0);\n        opacity: 1;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>\n      {{ $json.isBirthday ? '🎂 Happy Birthday, ' + $json.name + '!' : '' }}\n      {{ $json.isAnniversary ? '🎉 Happy Work Anniversary, ' + $json.name + '!' : '' }}\n    </h1>\n    <h2>We hope this message brightens your day!</h2>\n\n    <div class=\"message-box\">\n      <p><strong>Name:</strong> {{ $json.name }}</p>\n      <p><strong>Email:</strong> {{ $json.email }}</p>\n      <p><strong>Birthday:</strong> {{ new Date($json.birthday).toLocaleDateString() }}</p>\n      <p><strong>Work Anniversary:</strong> {{ new Date($json.work_anniversary).toLocaleDateString() }}</p>\n    </div>\n\n    <div class=\"message-box\">\n      <h3>Your Special Message:</h3>\n      {{ $json.isBirthday ? '<p>🎂 Happy Birthday, ' + $json.name + '! May your day be filled with love and joy.</p>' : '' }}\n      {{ $json.isAnniversary ? '<p>🎉 Happy Work Anniversary, ' + $json.name + '! Thank you for your dedication and hard work.</p>' : '' }}\n    </div>\n\n    <a href=\"#\" class=\"btn\">Celebrate With Us!</a>\n\n    <div class=\"footer\">\n      <p>Wishing you all the best,</p>\n      <p>QAID Software Pvt Ltd</p>\n      <p>contact@qaidsoft.com | +91-XXXXXXXXXX</p>\n    </div>\n  </div>\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        220,
        160
      ],
      "id": "d1446c0c-9f1a-4f96-86ac-bfc88eee6ade",
      "name": "HTML"
    },
    {
      "parameters": {
        "jsCode": "const items = $(\"Generate birthdays and work Anniversaries messages\").all();\nconst today = new Date();\n\nconst stats = {\n  todayBirthdays: 0,\n  todayAnniversaries: 0,\n  totalCelebrations: 0\n};\n\nconst todayCelebrations = [];\n\n// Utility to check if a date is today (ignoring the year)\nconst isToday = (date) =>\n  date.getDate() === today.getDate() && date.getMonth() === today.getMonth();\n\nfor (const item of items) {\n  const { name, birthday, work_anniversary, email } = item.json;\n\n  const birthdayDate = new Date(birthday);\n  const anniversaryDate = new Date(work_anniversary);\n\n  // Check if today is the birthday\n  if (isToday(birthdayDate)) {\n    stats.todayBirthdays++;\n    stats.totalCelebrations++;\n    todayCelebrations.push({\n      id: Math.random().toString(36).substr(2, 9),\n      employeeName: name,\n      type: 'BIRTHDAY',\n      date: birthdayDate.toISOString(),\n      email\n    });\n  }\n\n  // Check if today is the work anniversary\n  if (isToday(anniversaryDate)) {\n    stats.todayAnniversaries++;\n    stats.totalCelebrations++;\n    todayCelebrations.push({\n      id: Math.random().toString(36).substr(2, 9),\n      employeeName: name,\n      type: 'ANNIVERSARY',\n      date: anniversaryDate.toISOString(),\n      yearsOfService: today.getFullYear() - anniversaryDate.getFullYear(),\n      email\n    });\n  }\n}\n\nreturn [{ json: { stats, todayCelebrations } }];\n"
      },
      "id": "0b611f8d-f696-4a7e-9e3e-fd1d6dc73056",
      "name": "Format Response1",
      "type": "n8n-nodes-base.code",
      "position": [
        1620,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 🚀 Workflow Entry Points & Initial Processing\n\nThis section handles how the workflow starts and initial data preparation:\n\n- **Schedule Trigger**: Initiates the workflow at a set time (daily at 9 AM).\n- **Code for skip weekends**: A Code node that checks the current day and skips execution if it's a Saturday or Sunday, ensuring messages are only sent on weekdays.\n- **Process Schedule**: Another Code node that enriches scheduled trigger data with `trigger_type: 'schedule'` and the current date.\n- **API Trigger**: Allows external systems to trigger the workflow via a POST request to `/api/birthday-anniversary`.\n- **Process API Request**: Processes incoming API requests, adding `trigger_type: 'api'` and handling custom date inputs.\n- **Merge Triggers**: Combines outputs from both the scheduled and API triggers into a single data stream for further processing.\n",
        "height": 820,
        "width": 900
      },
      "type": "n8n-nodes-base.stickyNote",
      "name": "Entry Points & Initial Processing",
      "position": [
        -1480,
        -380
      ],
      "id": "generated-2e1ea98a-2960-4c42-a20c-85614fb600a9"
    },
    {
      "parameters": {
        "content": "## 💾 Data Retrieval & Filtering\n\nThis part of the workflow is responsible for fetching and refining data:\n\n- **Postgres**: Queries the `public.birthday_anniversary` table in your PostgreSQL database to retrieve employee data. It specifically looks for birthdays and work anniversaries that match the current date (or a custom date if provided by the API trigger).\n- **Fiter today birthdays and anniversaries**: A Code node that processes the data from Postgres. It identifies if an employee has a birthday or work anniversary *today* based on the month and day, setting `isBirthday` or `isAnniversary` flags accordingly.\n",
        "height": 640,
        "width": 500,
        "color": 4
      },
      "name": "Data Retrieval & Filtering",
      "position": [
        -540,
        -220
      ],
      "type": "n8n-nodes-base.stickyNote",
      "id": "generated-b3c37971-6b49-472e-8b7c-9b7b73c6d40f"
    },
    {
      "parameters": {
        "content": "## ✉️ Message Generation & Delivery\n\nThis section focuses on creating personalized messages and sending them out:\n\n- **Generate birthdays and work Anniversaries messages**: A Set node that transforms the filtered data into a structured JSON format suitable for email. It generates greeting messages based on `isBirthday` and `isAnniversary` flags.\n- **HTML**: Uses the data from the previous node to generate a dynamic HTML email template. This template includes personalized greetings, employee details, and a call-to-action.\n- **Gmail**: Sends the generated HTML email to the employee's email address. The subject is \"🎉 Today's Celebrations\", and the content is the HTML output from the HTML node.\n",
        "height": 640,
        "width": 600,
        "color": 5
      },
      "name": "Message Generation & Delivery",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        -220
      ],
      "id": "generated-33b2dfb9-9719-473a-a64a-7f25ad8a6dc0"
    },
    {
      "parameters": {
        "content": "## 🔍 Error Handling & Logging\n\nThis part of the workflow manages errors and logs important information:\n\n- **Error Trigger**: Catches any errors that occur within the workflow, initiating an error handling process.\n- **Code4**: A Code node connected to the Error Trigger. It is designed to process error information, although its current implementation is a placeholder. You can add custom error logging or notification logic here.\n- **If (Error Check)**: An If node that checks a condition, seemingly related to the output of the Gmail node, to determine if further error processing or logging is needed.\n- **Code2 (Weekend Adjustment)**: A Code node that adjusts birthday/anniversary flags for Saturday/Sunday if the email was sent on a weekday, ensuring correct logging for weekend celebrations.\n- **Postgres1**: Upserts (updates or inserts) log data into the `public.birthday_anniversary_logs` table in your PostgreSQL database. It logs `id`, `threadId`, and `labelIds` from the Gmail output.\n- **Format Response1**: A Code node that formats a response containing statistics about upcoming birthdays/anniversaries and details of today's celebrations. This is likely intended for an API response or internal logging.\n",
        "height": 800,
        "width": 1100,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "name": "Error Handling & Logging",
      "position": [
        760,
        -320
      ],
      "id": "generated-f3facac9-f3a8-4e45-a691-9b5f125f6964"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Code for skip weekends",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Schedule": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Trigger": {
      "main": [
        [
          {
            "node": "Process API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process API Request": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Triggers": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Fiter today birthdays and anniversaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fiter today birthdays and anniversaries": {
      "main": [
        [
          {
            "node": "Generate birthdays and work Anniversaries messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate birthdays and work Anniversaries messages": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code for skip weekends": {
      "main": [
        [
          {
            "node": "Process Schedule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Format Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e8e4b8ad-1f42-4ba0-98c4-0b09f2330966",
  "meta": {
    "instanceId": "b49f74740e4a155f21338af76c2aa80263c734ce9c55ab82f1aa145d7b4ee228"
  },
  "id": "SmJop45ursKVe7Nz",
  "tags": []
}