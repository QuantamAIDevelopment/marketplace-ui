{
  "name": "Sentiment_agent",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart customer support analyst assistant. Your task is to process customer feedback and return a structured summary for automation purposes.\n\nBelow is a customer message:\n{{ $json.body.message }}\n\nFollow these steps:\n1. Analyze the overall **sentiment** of the message. It should be one of: `Positive`, `Neutral`, or `Negative`.\n2. Identify **tags** that represent the core topic(s) of the feedback. Examples include:\n   - billing_issue\n   - app_bug\n   - late_delivery\n   - inventory_stockout\n   - support_praise\n   - product_suggestion\n   - account_login_issue\n3. Determine the **affected module** or department:\n   - Inventory\n   - Mobile App\n   - Billing\n   - Logistics\n   - Customer Support\n   - Web Portal\n   - General\n4. Generate a 1–2 sentence **summary** of the feedback.\n5. If sentiment is Negative and topic is critical (e.g., billing_issue, stockout, app_bug), consider it **high urgency**.\n6.Identify the product name or product ID mentioned (if any).\nDetermine the product type (e.g., shoes, mobile phone, skin cream, software license).\n\nOutput the result in **JSON** format like this:\n\n```json\n{\n  \"sentiment\": \"Negative\",\n  \"tags\": [\"inventory_stockout\"],\n  \"module\": \"Inventory\",\n  \"summary\": \"Customer couldn't order headphones due to repeated stockouts. Frustration expressed.\",\n  \"urgency\": \"high\"\n}\nname : {{ $json.body.name }}\ntime stamp: {{ $now }}\nconvert time to indian time\nmail : {{ $json.body.mail }}\n ",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -880,
        300
      ],
      "id": "f91a1536-c2c4-40fd-9143-06c0f0b8d7a2",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"name\":\"\",\n  \"mail\":\"xxx@gmail.com\",\n  \"time stamp\":\"\",\n  \"product\":\"ghhj\",\n  \"sentiment\": \"\",\n  \"tags\": [\"xxxx\"],\n  \"module\": \"\",\n  \"summary\": \"\",\n  \"urgency\": \"high,low\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -720,
        520
      ],
      "id": "302cbbeb-be58-4be3-a0a2-60c629471b7e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "const feedback = items.map(item => item.json);\n\n// Debug first item\nconsole.log(\"First item:\", JSON.stringify(feedback[0], null, 2));\n\n// Helper: Get field case-insensitively\nfunction getField(obj, ...keys) {\n  for (const key of keys) {\n    const found = Object.keys(obj).find(k => k.toLowerCase() === key.toLowerCase());\n    if (found) return obj[found];\n  }\n  return undefined;\n}\n\n// Step 1: Initialize structure\nconst moduleStats = {};\nlet crmPraise = [];\n\nfor (const item of feedback) {\n  const module = getField(item, 'Module') || 'General';\n  const sentiment = getField(item, 'Sentiment') || 'Neutral';\n  const tag = getField(item, 'Tag') || 'untagged';\n  const urgency = getField(item, 'Urgency') || 'low';\n\n  // Route CRM praise separately\n  if (module.toLowerCase() === 'crm' && (tag === 'support_praise' || sentiment === 'Positive')) {\n    crmPraise.push(item);\n    continue;\n  }\n\n  if (!moduleStats[module]) {\n    moduleStats[module] = {\n      count: 0,\n      tagCounts: {},\n      sentimentCounts: { Positive: 0, Neutral: 0, Negative: 0 }\n    };\n  }\n\n  moduleStats[module].count += 1;\n  moduleStats[module].sentimentCounts[sentiment] = (moduleStats[module].sentimentCounts[sentiment] || 0) + 1;\n  moduleStats[module].tagCounts[tag] = (moduleStats[module].tagCounts[tag] || 0) + 1;\n}\n\n// Step 2: Format the output message\nconst lines = [];\nlines.push(\"📊 Customer Feedback Sentiment Report – Last 7 Days\\n\");\n\nfor (const [module, data] of Object.entries(moduleStats)) {\n  const topTag = Object.entries(data.tagCounts).sort((a, b) => b[1] - a[1])[0];\n  const topTagText = topTag\n    ? `${topTag[1]} complaints flagged for “${topTag[0].replace(/_/g, ' ')}”`\n    : `${data.count} feedback items`;\n\n  const total = data.count;\n  const sentiments = data.sentimentCounts;\n\n  const negPct = total > 0 ? Math.round((sentiments.Negative / total) * 100) : 0;\n  const neuPct = total > 0 ? Math.round((sentiments.Neutral / total) * 100) : 0;\n  const posPct = total > 0 ? Math.round((sentiments.Positive / total) * 100) : 0;\n\n  lines.push(`🔹 ${module} Module\\n`);\n  lines.push(topTagText);\n  \n  const sentimentParts = [];\n  if (negPct > 0) sentimentParts.push(`${negPct}% Negative`);\n  if (neuPct > 0) sentimentParts.push(`${neuPct}% Neutral`);\n  if (posPct > 0 || sentimentParts.length === 0) sentimentParts.push(`${posPct}% Positive`);\n  lines.push(`Feedback sentiment: ${sentimentParts.join(', ')}`);\n\n  const suggestion = module === \"Inventory\"\n    ? \"Recheck stock sync & restock thresholds\"\n    : module === \"Mobile App\"\n    ? \"Investigate crash reports and Android compatibility\"\n    : module === \"Billing\"\n    ? \"Verify invoice generator and customer charge rules\"\n    : \"Review and triage issues with responsible team\";\n\n  lines.push(`Suggested action: ${suggestion}\\n`);\n}\n\n// Step 3: Add CRM Praise\nif (crmPraise.length) {\n  lines.push(\"🔸 CRM Updates:\\n\");\n  lines.push(`${crmPraise.length} loyalty customers praised support handling`);\n  lines.push(\"Logged to CRM with satisfaction tags\");\n}\n\n// Return result\nreturn [{\n  json: {\n    summary: lines.join('\\n')\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        180
      ],
      "id": "7ff0e506-a517-45e6-8f8c-88db5f8fd665",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "ERP"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        860,
        60
      ],
      "id": "82f26dfa-5115-4c9c-ac79-a40c5d13167a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "CRM"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        860,
        300
      ],
      "id": "75662be8-9040-4060-9022-469fe26b031a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b096751-ede2-417e-bc92-48669f1630fb",
              "leftValue": "={{ $json.output.sentiment }}",
              "rightValue": "Negative",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        280,
        160
      ],
      "id": "67db2941-76e3-4c3a-a6e6-8d67ef6e1d58",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e644ed76-acf8-412c-a840-74662c0338b9",
              "leftValue": "={{ $json.output.tags }}",
              "rightValue": "app_bug",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        540
      ],
      "id": "3e40bff6-fea4-49e7-8cc8-4c4ad9c1a718",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "21cff7c2-468a-470c-a797-47b4c55e84a3",
              "leftValue": "={{ $json.output.module }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        100
      ],
      "id": "1cf107bc-e9d2-4a62-a101-f02832ae0038",
      "name": "If2"
    },
    {
      "parameters": {
        "sendTo": "telegram4228@gmail.com",
        "subject": "resend",
        "emailType": "text",
        "message": "resend",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "7be98fce-771d-44cd-97d0-7c55ed7b7ba3",
      "name": "Send a message",
      "webhookId": "b2f67b94-dc23-4cd2-ac72-e6eb5e7a2c84",
      "credentials": {
        "gmailOAuth2": {
          "id": "IXvr56nA1pBAKeFO",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "telegram4228@gmail.com",
        "subject": "App bug",
        "emailType": "text",
        "message": "App bug",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        180,
        520
      ],
      "id": "a3919ff0-01df-4456-9bb9-c27a767d066e",
      "name": "Send a message1",
      "webhookId": "dd9a355e-247e-4a9c-afdb-c6a6d30ae6e4",
      "credentials": {
        "gmailOAuth2": {
          "id": "IXvr56nA1pBAKeFO",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1VysNazQ_U0ElQ4lTjHVeTNdMX0EsNCC60F0E-TwHD2g",
          "mode": "list",
          "cachedResultName": "ERP",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VysNazQ_U0ElQ4lTjHVeTNdMX0EsNCC60F0E-TwHD2g/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wi9EBIoh--GvaDjXGbujAhFbSKIy-neDS3ljmhnYHYM/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.output.name }}",
            "email": "={{ $json.output.mail }}",
            "time": "={{ $json.output['time stamp'] }}",
            "sentiment": "={{ $json.output.sentiment }}",
            "product": "={{ $json.output.product }}",
            "tag": "={{ $json.output.tags }}",
            "module": "={{ $json.output.module }}",
            "summary": "={{ $json.output.summary }}",
            "urgency": "={{ $json.output.urgency }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "time",
              "displayName": "time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "product",
              "displayName": "product",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment",
              "displayName": "sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tag",
              "displayName": "tag",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "module",
              "displayName": "module",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "urgency",
              "displayName": "urgency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        920,
        80
      ],
      "id": "0582be23-6e47-4120-9d9b-bddbde73467c",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3h6d09tR0Red9ok3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1xwo8gDZq9hQlKx8OzuoJV8l9FkNBdFEDVczj6sqXixk",
          "mode": "list",
          "cachedResultName": "CRM",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1xwo8gDZq9hQlKx8OzuoJV8l9FkNBdFEDVczj6sqXixk/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1oePAWdPlyfL2ukBGbzdw8qQM6ta7UqKJNOQU8C5N2LI/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.output.name }}",
            "email": "={{ $json.output.mail }}",
            "time": "={{ $json.output['time stamp'] }}",
            "product": "={{ $json.output.product }}",
            "sentiment": "={{ $json.output.sentiment }}",
            "tag": "={{ $json.output.tags[0] }}",
            "module": "={{ $json.output.module }}",
            "summary": "={{ $json.output.summary }}",
            "urgency": "={{ $json.output.urgency }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "time",
              "displayName": "time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "product",
              "displayName": "product",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "sentiment",
              "displayName": "sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tag",
              "displayName": "tag",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "module",
              "displayName": "module",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "urgency",
              "displayName": "urgency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        900,
        340
      ],
      "id": "9e09585c-a426-4d15-80e5-736b7c371dfb",
      "name": "Append row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3h6d09tR0Red9ok3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1FW5WRq-bChlV6fKSL4z896S3mbNvAT_FUWCO9CNqXMU",
          "mode": "list",
          "cachedResultName": "sentiment_agent_workflow",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FW5WRq-bChlV6fKSL4z896S3mbNvAT_FUWCO9CNqXMU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1KpUws9G-VQtnTLmStl9VxRXFtS3Nl1VwuaPCXZ_vILY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.name }}",
            "email": "={{ $json.email }}",
            "time": "={{ $json.time }}",
            "product": "={{ $json.product }}",
            "sentiment": "={{ $json.sentiment }}",
            "tag": "={{ $json.tag }}",
            "module": "={{ $json.module }}",
            "summary": "={{ $json.summary }}",
            "urgency": "={{ $json.urgency }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "time",
              "displayName": "time",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "product",
              "displayName": "product",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "sentiment",
              "displayName": "sentiment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tag",
              "displayName": "tag",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "module",
              "displayName": "module",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "urgency",
              "displayName": "urgency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1380,
        200
      ],
      "id": "17ed0e4a-4182-4e05-9d66-a029d3fe823d",
      "name": "Append row in sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3h6d09tR0Red9ok3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1FW5WRq-bChlV6fKSL4z896S3mbNvAT_FUWCO9CNqXMU",
          "mode": "list",
          "cachedResultName": "sentiment_agent_workflow",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FW5WRq-bChlV6fKSL4z896S3mbNvAT_FUWCO9CNqXMU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1FW5WRq-bChlV6fKSL4z896S3mbNvAT_FUWCO9CNqXMU/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1740,
        180
      ],
      "id": "756d5e70-18ec-4700-8a78-04b00d7de755",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3h6d09tR0Red9ok3",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "telegram4228@gmail.com",
        "subject": "Customer feedback sentiment report",
        "emailType": "text",
        "message": "={{ $json.summary }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2420,
        180
      ],
      "id": "0e3984b2-a796-47c5-8e3d-3a8e374ef364",
      "name": "Send a message2",
      "webhookId": "aac661d7-ce5e-493f-a57b-e6bcaf781e5d",
      "credentials": {
        "gmailOAuth2": {
          "id": "IXvr56nA1pBAKeFO",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "siri",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1320,
        300
      ],
      "id": "b6eebdb9-6d82-4d64-ae3a-ea89378ee1fc",
      "name": "Webhook",
      "webhookId": "6d449783-b662-48b3-a60c-3f7c4e148834"
    },
    {
      "parameters": {
        "jsCode": "// Step 1: Calculate date 7 days ago, start of day\nconst oneWeekAgo = new Date();\noneWeekAgo.setHours(0, 0, 0, 0); // Set to midnight\noneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n// Step 2: Get all items from previous node\nconst items = $input.all();\n\n// Step 3: Filter only valid items from last 7 days\nconst lastSevenDaysData = items.filter((item) => {\n  const timeStr = item?.json?.Time || item?.json?.time; // Support case variations\n\n  // Skip if no time\n  if (!timeStr) return false;\n\n  const itemDate = new Date(timeStr);\n\n  // Skip if invalid date\n  if (isNaN(itemDate)) return false;\n\n  // Keep only if item is within the last 7 days\n  return itemDate >= oneWeekAgo;\n});\n\n// Step 4: Return filtered items\nreturn lastSevenDaysData;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        180
      ],
      "id": "111287c6-c011-4647-9dd9-6125d3d21bef",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -860,
        520
      ],
      "id": "9461dc75-eb62-4979-a271-68c835a724ef",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "n0YfdKB0eReHw7xr",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "=  {{ $('Code').item.json.summary }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        2640,
        180
      ],
      "id": "d6c8410a-ee32-4755-83b7-977cb1b44fc7",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Append row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet1": {
      "main": [
        [
          {
            "node": "Append row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet2": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send a message2": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0788c457-1604-4ef7-adc7-acef5f5bc012",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a4d9c2b9ad3d913f5360573ed9170275c47329c5d0ae6cd0193812a6e8c000a9"
  },
  "id": "YAAkruBPNCkF4RAz",
  "tags": []
}