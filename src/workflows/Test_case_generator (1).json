{
  "name": "Test case generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "doc-input",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5a4cab11-614c-44ae-8d04-3e6b96b0ef40",
      "name": "Webhook1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -780,
        180
      ],
      "webhookId": "c7d78fd8-3a34-4398-9fa5-90d32cc3eee2"
    },
    {
      "parameters": {
        "jsCode": "const docText = $json[\"content\"]; // e.g., from Google Docs node\n\n// Basic extraction using regex or string manipulation\nconst titleMatch = docText.match(/Title:\\s*(.+)/i);\nconst descriptionMatch = docText.match(/Functional Description:\\s*([\\s\\S]*?)\\n(?:User Stories:|Acceptance Criteria:)/i);\nconst userStoriesMatch = docText.match(/User Stories:\\s*([\\s\\S]*?)(?:\\n[A-Z]|$)/i);\nconst acceptanceMatch = docText.match(/Acceptance Criteria:\\s*([\\s\\S]*?)(?:\\n[A-Z]|$)/i);\n\nreturn [\n  {\n    json: {\n      title: titleMatch ? titleMatch[1].trim() : '',\n      description: descriptionMatch ? descriptionMatch[1].trim() : '',\n      userStories: userStoriesMatch ? userStoriesMatch[1].trim().split('\\n').filter(Boolean) : [],\n      acceptanceCriteria: acceptanceMatch ? acceptanceMatch[1].trim().split('\\n').filter(Boolean) : [],\n    }\n  }\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        140
      ],
      "id": "78f5d828-23b7-49e7-bf0b-47eea7c7906c",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Use a structured, deterministic prompt like:\n\nPrompt:\n“From the following feature specification, generate a list of test cases. Include:\n\nTest ID-TC001\n\nScenario Name\n\nPreconditions\n\nSteps\n\nExpected Result\n\nTags (e.g., Regression, Boundary, Integration)\nEnsure both positive and negative test cases are covered, including boundary and edge scenarios where applicable.”\n\nSpecification:\n{{ $json.title }}\n{{ $json.description }}\n{{ $json.userStories }}\n{{ $json.acceptanceCriteria }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -20,
        -60
      ],
      "id": "2be96c19-6578-4c91-996e-4730443d1651",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "const inputText = $input.first().json.output;\n\nif (!inputText || typeof inputText !== 'string' || inputText.trim() === '') {\n  return [{ json: { error: 'No test case data provided.' } }];\n}\n\nconsole.log(\"=== AI RAW OUTPUT START ===\\n\" + inputText + \"\\n=== AI RAW OUTPUT END ===\");\n\nconst testCases = [];\n\n// Match each block like: **Test ID-TC001: Title**\nconst testCaseRegex = /\\*\\*Test ID-(TC\\d+):\\s*(.*?)\\*\\*([\\s\\S]*?)(?=\\n\\*\\*Test ID-|$)/g;\nconst blocks = [...inputText.matchAll(testCaseRegex)];\n\nfor (const block of blocks) {\n  const [, test_id, rawTitle, body] = block;\n\n  const scenarioMatch = body.match(/\\*\\*Scenario Name:\\*\\*\\s*(.*)/i);\n  const scenario_title = scenarioMatch ? scenarioMatch[1].trim() : rawTitle.trim();\n\n  const preconditionsMatch = body.match(/\\*\\*Preconditions:\\*\\*\\s*([\\s\\S]*?)(?=\\n\\*\\*Steps:\\*\\*|\\n\\*\\*Expected Result:|\\n\\*\\*Tags:|\\n\\*\\*Test ID-|$)/i);\n  const preconditions = preconditionsMatch ? preconditionsMatch[1].trim() : \"N/A\";\n\n  const stepsMatch = body.match(/\\*\\*Steps:\\*\\*\\s*([\\s\\S]*?)(?=\\n\\*\\*Expected Result:|\\n\\*\\*Tags:|\\n\\*\\*Test ID-|$)/i);\n  const test_steps = stepsMatch\n    ? stepsMatch[1].trim().split(/\\d+\\.\\s/).filter(Boolean).map(s => s.trim())\n    : ['No steps listed'];\n\n  const expectedMatch = body.match(/\\*\\*Expected Result:\\*\\*\\s*([\\s\\S]*?)(?=\\n\\*\\*Tags:|\\n\\*\\*Test ID-|$)/i);\n  const expected_result = expectedMatch ? expectedMatch[1].trim() : \"N/A\";\n\n  const tagsMatch = body.match(/\\*\\*Tags:\\*\\*\\s*(.*)/i);\n  const tags = tagsMatch ? tagsMatch[1].split(',').map(t => t.trim()) : [];\n\n  const test_type = tags.includes('Negative') ? 'Negative'\n                   : tags.includes('Positive') ? 'Positive'\n                   : tags.includes('Boundary') ? 'Boundary'\n                   : 'Unspecified';\n\n  testCases.push({\n    json: {\n      test_id,\n      scenario_title,\n      preconditions,\n      test_steps,\n      expected_result,\n      tags,\n      test_type\n    }\n  });\n}\n\nif (testCases.length === 0) {\n  return [{ json: { error: 'No valid test cases parsed.' } }];\n}\n\nreturn testCases;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        20
      ],
      "id": "8e85290f-2985-4f66-9180-421043fcb9cc",
      "name": "Code3",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json.body.docId }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        -480,
        60
      ],
      "id": "19d4a457-4517-4c6a-8c7a-e63b6c073faa",
      "name": "Get a document",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "p3ZSdsTU8ABw0BOE",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        880,
        -200
      ],
      "id": "f9430ce6-d319-4a35-ba79-ca595d46e5f2",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "// Build the HTML table header\nlet html = `\n  <h2>🧪 QA Test Cases Summary (${items.length} cases)</h2>\n  <table border=\"1\" cellpadding=\"6\" cellspacing=\"0\" style=\"border-collapse: collapse; font-family: Arial, sans-serif; font-size: 14px;\">\n    <thead style=\"background-color: #f2f2f2;\">\n      <tr>\n        <th>Test ID</th>\n        <th>Scenario</th>\n        <th>Preconditions</th>\n        <th>Steps</th>\n        <th>Expected Result</th>\n        <th>Tags</th>\n        <th>Type</th>\n        <th>User Story</th>\n      </tr>\n    </thead>\n    <tbody>\n`;\n\nfor (const item of items) {\n  const data = item.json;\n\n  const testId = data.test_id || '';\n  const scenario = data.scenario_title || '';\n  const preconditions = data.preconditions || '';\n  const steps = data.test_steps || '';\n  const expected = data.expected_result || '';\n  const tags = Array.isArray(data.tags) ? data.tags.join(', ') : (data.tags || '');\n  const type = data.test_type || '';\n  const userStory = data.user_story || '';\n\n  html += `\n    <tr>\n      <td>${testId}</td>\n      <td>${scenario}</td>\n      <td>${preconditions}</td>\n      <td><pre style=\"white-space: pre-wrap; margin: 0;\">${steps}</pre></td>\n      <td>${expected}</td>\n      <td>${tags}</td>\n      <td>${type}</td>\n      <td>${userStory}</td>\n    </tr>\n  `;\n}\n\nhtml += `</tbody></table>`;\n\n// Return formatted email object\nreturn [\n  {\n    json: {\n      email_subject: `🧪 ${items.length} Test Cases for Login Module`,\n      email_html: html\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        60
      ],
      "id": "58546a96-be39-4c0e-b970-f371018a39b3",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "663cb5f9-ebb7-4a9b-b8f8-e589cffce821",
              "leftValue": "={{ !$json[\"test_cases\"] || $json[\"test_cases\"].length === 0 }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        540,
        380
      ],
      "id": "6982164b-f4d6-40c1-9ff8-92d1e46916b5",
      "name": "If"
    },
    {
      "parameters": {
        "sendTo": "mailhr100@gmail.com",
        "subject": "login features",
        "message": "={{ $json.email_html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        860,
        60
      ],
      "id": "6775884f-dc96-4bee-a6f4-ba73fe662377",
      "name": "Send a message",
      "webhookId": "535e2112-bb4a-43ee-815f-ab7bb7c6d73f",
      "credentials": {
        "gmailOAuth2": {
          "id": "RtD3gLN5RtoL2HT7",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0",
          "mode": "list",
          "cachedResultName": "tester",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2111323128,
          "mode": "list",
          "cachedResultName": "logs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0/edit#gid=2111323128"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $('Webhook1').item.json.body.doctitle }}",
            "Number of test cases generated": "={{ $json.test_id }}",
            "Timestamp and author": "={{ $('Webhook1').item.json.body.author }}{{ $now }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Number of test cases generated",
              "displayName": "Number of test cases generated",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Timestamp and author",
              "displayName": "Timestamp and author",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        800,
        260
      ],
      "id": "aab74efe-5a34-4996-8b61-f095b31b8f10",
      "name": "Append row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "mAbBUrO2MoIY7E9T",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "mailhr100@gmail.com",
        "subject": "hi",
        "emailType": "text",
        "message": "“Test case generation failed for Feature X – check formatting.”",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        800,
        480
      ],
      "id": "e4f72086-27b1-4f11-a5a8-ec8519c570ac",
      "name": "Send a message1",
      "webhookId": "6f676f57-f7b6-406a-8054-a03c1f87a5b0",
      "credentials": {
        "gmailOAuth2": {
          "id": "RtD3gLN5RtoL2HT7",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -20,
        240
      ],
      "id": "d8ce5dba-5af6-4873-b5fe-69a76810a124",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "6LGRNoanxZ6SwwRc",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0",
          "mode": "list",
          "cachedResultName": "tester",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1334181979,
          "mode": "list",
          "cachedResultName": "tests",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zr4GtqwwISlhZdM-GB3kAqxYHUJqic_ztPJx7KDi1r0/edit#gid=1334181979"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "test id": "={{ $json.test_id }}",
            "title": "={{ $json.scenario_title }}",
            "type": "={{ $json.test_type }}",
            "steps": "={{ $json.test_steps }}",
            "expected results": "={{ $json.expected_result }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "test id",
              "displayName": "test id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "steps",
              "displayName": "steps",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "expected results",
              "displayName": "expected results",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        620,
        -180
      ],
      "id": "ca256852-f99d-4b71-bc82-cad069139e70",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "mAbBUrO2MoIY7E9T",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook1": {
      "main": [
        [
          {
            "node": "Get a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a document": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d35ff709-6f1c-4258-ba88-3b2a467c24bd",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3f8ce854eb218784800a9adee4286c7a7f35f42b7492a2e67fda154decef7217"
  },
  "id": "75jMIduHNCwz7EF8",
  "tags": []
}