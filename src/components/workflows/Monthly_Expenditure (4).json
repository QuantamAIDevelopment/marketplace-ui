{
  "name": "Monthly Expenditure",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -1620,
        -600
      ],
      "id": "6d58ebfb-7666-4602-b491-55ca8370d0bb",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "NTosbwcj8AboqOaY",
          "name": "Gmail account 4"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = items.map(item => item.json);\nconst categoryBreakdown = {};\nlet totalAmount = 0;\n\nrows.forEach(row => {\n  const cat = row.category || \"Uncategorized\";\n  const amt = parseFloat(row.amount) || 0;\n  const label = row.paid_to || row.description || \"Unknown\";\n\n  if (!categoryBreakdown[cat]) {\n    categoryBreakdown[cat] = {\n      total: 0,\n      items: []\n    };\n  }\n\n  categoryBreakdown[cat].total += amt;\n  categoryBreakdown[cat].items.push({\n    label,\n    amount: amt\n  });\n\n  totalAmount += amt;\n});\n\nreturn [{\n  json: {\n    totalAmount,\n    categorized: categoryBreakdown\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -440
      ],
      "id": "675f6d4c-7404-4ebb-a737-43e19c4a80b7",
      "name": "Code3"
    },
    {
      "parameters": {
        "sendTo": "gugulothusony07@gmail.com",
        "subject": "Monthly Expenditure",
        "emailType": "text",
        "message": "=Hi Asmitha,\n\n\nTotal Spent: {{ $json.totalAmount }}\n\nItems:\n{{ $json.categorized.Uncategorized.items.map(item => `    item-name: ${item.label}, item-amount: ${item.amount}`).join('\\n') }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        200,
        -440
      ],
      "id": "6c5a52d4-aa98-4683-9d40-9a90a03afec5",
      "name": "Gmail",
      "webhookId": "b7b01c52-aeba-4cf1-b53d-1f8e1635678f",
      "credentials": {
        "gmailOAuth2": {
          "id": "NTosbwcj8AboqOaY",
          "name": "Gmail account 4"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ee0c9efc-9d9b-4af0-af24-f7c147e52ee7",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1600,
        -240
      ],
      "id": "9167e0d1-f2b7-4f9f-a0ee-9348526706b3",
      "name": "Webhook",
      "webhookId": "ee0c9efc-9d9b-4af0-af24-f7c147e52ee7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=give amount without any \",\"\n{\n  \"Date of bill \": \"YYYY-MM-DD\",\n  \"amount\": \"XXXXX\",\n  \"paid to\" :\"xxx\"\n  \"mtrno\"  :\"xxx\"\n}\n analyze bill paid to\n{{ $json.webhookUrl }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1360,
        -240
      ],
      "id": "5e0ece82-5481-4519-8599-da7d5bf177b7",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "amount": "={{ $json.message.content.amount }}",
            "paid_to": "={{ $json.message.content['paid to'] }}",
            "txn_date": "={{ $json.message.content.date }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "amount",
              "displayName": "amount",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "paid_to",
              "displayName": "paid_to",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "txn_date",
              "displayName": "txn_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -940,
        -620
      ],
      "id": "d845129c-f024-44e1-bb17-5337cdb141f0",
      "name": "Postgres",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "dp9mUeoueNmaxCgd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -500,
        -440
      ],
      "id": "ac1428fd-a500-4191-ad27-d070496cf4aa",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -280,
        -440
      ],
      "id": "dbbf93f4-d654-46c7-a35a-dcd3fb2565bd",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "dp9mUeoueNmaxCgd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "amount": "={{ $json.amount }}",
            "paid_to": "={{ $json['paid to'] }}",
            "txn_date": "2025-06-15T00:00:00"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "amount",
              "displayName": "amount",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "paid_to",
              "displayName": "paid_to",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "txn_date",
              "displayName": "txn_date",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1280,
        180
      ],
      "id": "d014478f-e1c0-490a-8f14-042bf53dfaad",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "dp9mUeoueNmaxCgd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "bills",
        "formDescription": "data bills",
        "formFields": {
          "values": [
            {
              "fieldLabel": "date"
            },
            {
              "fieldLabel": "amount"
            },
            {
              "fieldLabel": "paid to"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1580,
        140
      ],
      "id": "ad82ca62-a2d1-459e-84fd-3d8da31cc82e",
      "name": "On form submission",
      "webhookId": "dad4f547-a934-4ab6-b683-ae72dd2794d9"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1380,
        -400
      ],
      "id": "d80484c9-7301-42c4-8352-1d0252ce84e1",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "4WfHCXk5juWOfUpD",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.snippet }}\nrespond strictly in json format\n{\n  \"amount\": ,\n  \"paid to\": \"\",\n  \"date\": \"2025-05-18T14:12:00\",\n  \n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1380,
        -620
      ],
      "id": "47d4b99b-0263-42c8-976f-e64fcc74d77d",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"amount\": \"777\",\n  \"paid to\": \"fgh\",\n  \"date\": \"2025-05-18T14:12:00\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1160,
        -400
      ],
      "id": "4f1bb482-2e18-4759-8ad3-9c836cfe8e1a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"amount\": \"777\",\n  \"paid to\": \"fgh\",\n  \"date\": \"2025-05-18T14:12:00\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1180,
        -80
      ],
      "id": "39d236cb-347d-4788-a5a2-cd4d694eb79f",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -880,
        220
      ],
      "id": "68fda885-ad0a-46a3-9c08-5ed7aa8bceb1",
      "name": "When chat message received",
      "webhookId": "57507252-02b7-4189-aa82-83329c808ea7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart personal expense assistant.\n\n## Expense Data:\nfetch the data from the postgres attached to tool\ngive only single output depends on input\nYou receive structured expense data from a database , and a user’s question in natural language.\n\nEach expense record includes:\n\n- `amount` (in ₹)\n- `paid_to` (e.g., Fuel, Dining, Groceries)\n\n---\n\n## Your Task:\n\n1. Understand the user's query and determine their intent:\n   - Time filter: (e.g., “May”, “last month”, “2024”)\n   - Category filter: (e.g., “fuel”, “dining”, “groceries”)\n   - Type of question: total spent, trends, top categories, comparisons, etc.\n\n2. Analyze the given data and answer the user’s query using:\n   - ✅ Filtered totals (e.g., “You spent ₹4,100 on fuel in May.”)\n   - 📊 Category share (e.g., “Food made up 32% of your May expenses.”)\n   - 🔁 Trend insights (e.g., “Up 8% from April.”)\n   - 🏆 Top categories or vendors\n   - 📉 If spending dropped or increased\n\n3. Write a friendly, human-style response, like:\n   - “You spent ₹12,300 in May. Dining and fuel were your top categories. Compared to April, your total expenses increased by 8%.”\n\n---\n\n## User Query:\n{{ $('When chat message received').item.json.chatInput }}\n\n\n\n---\n\n## Output Instructions:\n- Write a clear and concise summary of the spending behavior.\n- Use ₹ with numbers.\n- Mention key insights (totals, category share, trends).\n- End with a helpful offer, like:\n  _“Want to see this as a chart or grouped by vendor?”_",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -380,
        220
      ],
      "id": "51c7852b-c9b4-4ce2-83f8-5e9efd5cb0f5",
      "name": "AI Agent2",
      "alwaysOutputData": true,
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "expensess",
          "mode": "list",
          "cachedResultName": "expensess"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -680,
        240
      ],
      "id": "26e1c6dc-5e39-4f62-b1bd-ac8c6e69198d",
      "name": "Postgres4",
      "credentials": {
        "postgres": {
          "id": "dp9mUeoueNmaxCgd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -360,
        440
      ],
      "id": "8b0a8b67-c301-41b6-a561-19ec7fb50f60",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "vveWko3pQwZMnQl3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1340,
        -20
      ],
      "id": "25b575a0-f3a5-4b33-99ea-eba68c4620bb",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "0JN8Pr9PUcpiPegd",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1IO9qBBGLxrCA60aErLKnrm8Q-V4YCvF5KMO1vPSR0LQ",
          "mode": "list",
          "cachedResultName": "Monthly",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IO9qBBGLxrCA60aErLKnrm8Q-V4YCvF5KMO1vPSR0LQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1IO9qBBGLxrCA60aErLKnrm8Q-V4YCvF5KMO1vPSR0LQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Amount": "={{ $json.output.amount }}",
            "Paid to": "={{ $json.output['paid to'] }}",
            "Date": "={{ $json.output.date }}"
          },
          "matchingColumns": [
            "Amount"
          ],
          "schema": [
            {
              "id": "Amount",
              "displayName": "Amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Paid to",
              "displayName": "Paid to",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -1000,
        -240
      ],
      "id": "52ce6370-9ecc-4e05-97ca-5b0afbbddb1b",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "itM6CBy5chDJgjXl",
          "name": "Google Sheets account 3"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -780,
        -240
      ],
      "id": "bac58a20-fae6-49c9-9735-1c21851f4770",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Postgres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        []
      ]
    },
    "Postgres4": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2aadb165-0ca0-470b-8778-ca0036d22a73",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "98ba3a0cbe4353cc8c08c286a75d3e4d61ad85718e0dd245051e7defe076ef97"
  },
  "id": "FlwnWf4GEfvSPeSB",
  "tags": []
}